// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}
func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type GenericResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericResponse) Reset()         { *m = GenericResponse{} }
func (m *GenericResponse) String() string { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()    {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}
func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse.Unmarshal(m, b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
}
func (m *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(m, src)
}
func (m *GenericResponse) XXX_Size() int {
	return xxx_messageInfo_GenericResponse.Size(m)
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

func (m *GenericResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "node.EmptyRequest")
	proto.RegisterType((*GenericResponse)(nil), "node.GenericResponse")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x1b, 0x4a, 0x4b, 0x18, 0x4c, 0x80, 0x2d, 0x11, 0xe0, 0x13, 0xca, 0xa9, 0x42, 0x6a,
	0x22, 0x85, 0xbf, 0x55, 0x54, 0xa4, 0xda, 0xd0, 0x70, 0x68, 0xa5, 0x2a, 0x09, 0x42, 0xe2, 0xb6,
	0xf1, 0x4e, 0xd2, 0x55, 0xec, 0xdd, 0xb0, 0x3b, 0x86, 0xe6, 0xce, 0x85, 0x37, 0xe0, 0x39, 0x79,
	0x02, 0x14, 0xaf, 0x1d, 0x0c, 0x32, 0x25, 0xe1, 0xb6, 0xf3, 0xcd, 0xfc, 0xbe, 0x1d, 0xcf, 0xac,
	0x0c, 0xa0, 0xb4, 0xc0, 0xf6, 0xdc, 0x68, 0xd2, 0xec, 0xfa, 0xf2, 0xec, 0x7b, 0x5f, 0x78, 0x1c,
	0x23, 0x39, 0xcd, 0xbf, 0x9d, 0x60, 0x32, 0xd7, 0x3a, 0x76, 0x61, 0xab, 0x01, 0xde, 0xdb, 0x64,
	0x4e, 0x8b, 0x01, 0x7e, 0x4a, 0xd1, 0x52, 0xeb, 0x00, 0xee, 0xf4, 0x51, 0xa1, 0x91, 0xd1, 0x00,
	0xed, 0x5c, 0x2b, 0x8b, 0xcc, 0x87, 0xba, 0xc9, 0xcf, 0x0f, 0x6b, 0x8f, 0x6b, 0xfb, 0x37, 0x07,
	0xab, 0xb8, 0xfb, 0x63, 0x1b, 0x76, 0x3f, 0x64, 0xf6, 0xec, 0x10, 0xbc, 0xd0, 0x20, 0x27, 0xcc,
	0xe3, 0xbd, 0x76, 0xd6, 0x89, 0xd3, 0x72, 0x7b, 0x9f, 0x39, 0xf1, 0x54, 0x73, 0x51, 0xf8, 0xb7,
	0xb6, 0xd8, 0x73, 0x80, 0xa5, 0x92, 0x83, 0xf7, 0xca, 0x35, 0x57, 0x61, 0x3d, 0x68, 0x38, 0xf7,
	0x13, 0xa3, 0x93, 0x21, 0xa2, 0xd8, 0xe4, 0xce, 0x00, 0xf6, 0xc2, 0x18, 0xb9, 0x71, 0x97, 0xbe,
	0xe1, 0xc4, 0xc7, 0xdc, 0x22, 0xcb, 0x8b, 0xcb, 0x33, 0xf1, 0x9b, 0x4e, 0xfb, 0x63, 0x2e, 0xad,
	0x2d, 0x16, 0x2e, 0x87, 0x45, 0xce, 0x61, 0x48, 0x9c, 0x52, 0x5b, 0xc9, 0xfb, 0x4e, 0x2b, 0xd7,
	0x95, 0x4c, 0x5e, 0x00, 0xf4, 0x91, 0x8e, 0x85, 0x30, 0x68, 0xab, 0xf9, 0xea, 0x0f, 0x38, 0xcc,
	0xb8, 0x80, 0xc7, 0x5c, 0x45, 0x57, 0xf6, 0x9d, 0x97, 0x94, 0xd0, 0x23, 0xf0, 0xfa, 0x48, 0xa3,
	0xcb, 0x77, 0xd2, 0x92, 0x36, 0x8b, 0x4a, 0xf8, 0x81, 0xd3, 0x56, 0x45, 0xbf, 0xf0, 0xee, 0xf7,
	0x1a, 0xdc, 0x38, 0x73, 0xaf, 0x88, 0x8d, 0xa0, 0xd9, 0x47, 0x7a, 0xaf, 0x22, 0xad, 0x26, 0xd2,
	0x24, 0x28, 0x8a, 0x86, 0x5a, 0xc5, 0xd0, 0x2a, 0x92, 0xff, 0x6c, 0xf0, 0x25, 0xd4, 0x87, 0x18,
	0x63, 0x44, 0xa3, 0xcb, 0x62, 0xa7, 0x2e, 0x2e, 0xc8, 0xfb, 0xbf, 0x8b, 0xab, 0xd6, 0xbe, 0xd5,
	0x60, 0x27, 0xbc, 0xe0, 0x52, 0xb1, 0x1e, 0x78, 0x03, 0x1c, 0xa7, 0x32, 0x16, 0x2e, 0xfe, 0x8f,
	0xc5, 0x0e, 0x17, 0x2a, 0x3a, 0x37, 0x7a, 0xfa, 0xd7, 0xc5, 0xe4, 0x8b, 0x2d, 0xd7, 0x95, 0x7a,
	0xf9, 0x7a, 0x0d, 0x60, 0x64, 0xb8, 0xb2, 0x3c, 0x22, 0x6d, 0xd8, 0x09, 0x78, 0x21, 0x8f, 0xe3,
	0x50, 0x2b, 0x32, 0x3c, 0x22, 0xf6, 0x28, 0x7f, 0xab, 0x25, 0xad, 0xf0, 0xcd, 0x53, 0x05, 0x2c,
	0xb5, 0x2a, 0xf5, 0xf6, 0x1a, 0xea, 0x59, 0x62, 0x82, 0x86, 0x35, 0x4b, 0x85, 0x13, 0x34, 0x6b,
	0xf1, 0xcf, 0x60, 0x3b, 0x90, 0x82, 0xdd, 0xcd, 0x67, 0x2f, 0xc5, 0x5a, 0xd4, 0x2b, 0xd8, 0x19,
	0x12, 0x9f, 0xad, 0x1e, 0x5a, 0x16, 0xac, 0x43, 0x76, 0x4f, 0xe1, 0xd6, 0xb9, 0xd1, 0x9f, 0xa5,
	0x95, 0x5a, 0xa1, 0x61, 0x47, 0xd0, 0x38, 0x4e, 0x49, 0x27, 0x9c, 0x30, 0xf3, 0xb0, 0x1b, 0x6d,
	0xa6, 0x7b, 0x06, 0x8d, 0x20, 0xd6, 0xd1, 0x2c, 0xcb, 0xf0, 0xe5, 0x5c, 0x7b, 0xe0, 0x15, 0x86,
	0x81, 0x14, 0x9b, 0xd9, 0x05, 0x4f, 0x3e, 0xee, 0x4f, 0x25, 0x5d, 0xa4, 0xe3, 0x76, 0xa4, 0x93,
	0x8e, 0x48, 0xed, 0xec, 0x20, 0xfb, 0x2f, 0x8e, 0xd3, 0x49, 0x87, 0xa7, 0xa4, 0xa7, 0xa8, 0x3a,
	0x53, 0xdd, 0x59, 0xd2, 0xe3, 0xdd, 0x2c, 0xf3, 0xf4, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad,
	0xed, 0x73, 0x6e, 0x62, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	CreateWallet(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	LoadWallet(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	CreateFromSeed(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	ClearWalletDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetWalletStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WalletStatusResponse, error)
	GetAddress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	GetBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetTxHistory(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TxHistoryResponse, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) CreateWallet(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) LoadWallet(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/LoadWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateFromSeed(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/CreateFromSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ClearWalletDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/ClearWalletDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWalletStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WalletStatusResponse, error) {
	out := new(WalletStatusResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetWalletStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAddress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTxHistory(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TxHistoryResponse, error) {
	out := new(TxHistoryResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetTxHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	CreateWallet(context.Context, *CreateRequest) (*LoadResponse, error)
	LoadWallet(context.Context, *LoadRequest) (*LoadResponse, error)
	CreateFromSeed(context.Context, *CreateRequest) (*LoadResponse, error)
	ClearWalletDatabase(context.Context, *EmptyRequest) (*GenericResponse, error)
	GetWalletStatus(context.Context, *EmptyRequest) (*WalletStatusResponse, error)
	GetAddress(context.Context, *EmptyRequest) (*LoadResponse, error)
	GetBalance(context.Context, *EmptyRequest) (*BalanceResponse, error)
	GetTxHistory(context.Context, *EmptyRequest) (*TxHistoryResponse, error)
}

// UnimplementedWalletServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (*UnimplementedWalletServer) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedWalletServer) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadWallet not implemented")
}
func (*UnimplementedWalletServer) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFromSeed not implemented")
}
func (*UnimplementedWalletServer) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearWalletDatabase not implemented")
}
func (*UnimplementedWalletServer) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletStatus not implemented")
}
func (*UnimplementedWalletServer) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedWalletServer) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedWalletServer) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxHistory not implemented")
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWallet(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_LoadWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).LoadWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/LoadWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).LoadWallet(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateFromSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateFromSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/CreateFromSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateFromSeed(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ClearWalletDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ClearWalletDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/ClearWalletDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ClearWalletDatabase(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWalletStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAddress(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBalance(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTxHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTxHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetTxHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTxHistory(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _Wallet_CreateWallet_Handler,
		},
		{
			MethodName: "LoadWallet",
			Handler:    _Wallet_LoadWallet_Handler,
		},
		{
			MethodName: "CreateFromSeed",
			Handler:    _Wallet_CreateFromSeed_Handler,
		},
		{
			MethodName: "ClearWalletDatabase",
			Handler:    _Wallet_ClearWalletDatabase_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _Wallet_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Wallet_GetAddress_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Wallet_GetBalance_Handler,
		},
		{
			MethodName: "GetTxHistory",
			Handler:    _Wallet_GetTxHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// MempoolClient is the client API for Mempool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MempoolClient interface {
	GetUnconfirmedBalance(ctx context.Context, in *GetUnconfirmedBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	SelectTx(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
}

type mempoolClient struct {
	cc *grpc.ClientConn
}

func NewMempoolClient(cc *grpc.ClientConn) MempoolClient {
	return &mempoolClient{cc}
}

func (c *mempoolClient) GetUnconfirmedBalance(ctx context.Context, in *GetUnconfirmedBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/node.Mempool/GetUnconfirmedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolClient) SelectTx(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	out := new(SelectResponse)
	err := c.cc.Invoke(ctx, "/node.Mempool/SelectTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MempoolServer is the server API for Mempool service.
type MempoolServer interface {
	GetUnconfirmedBalance(context.Context, *GetUnconfirmedBalanceRequest) (*BalanceResponse, error)
	SelectTx(context.Context, *SelectRequest) (*SelectResponse, error)
}

// UnimplementedMempoolServer can be embedded to have forward compatible implementations.
type UnimplementedMempoolServer struct {
}

func (*UnimplementedMempoolServer) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnconfirmedBalance not implemented")
}
func (*UnimplementedMempoolServer) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTx not implemented")
}

func RegisterMempoolServer(s *grpc.Server, srv MempoolServer) {
	s.RegisterService(&_Mempool_serviceDesc, srv)
}

func _Mempool_GetUnconfirmedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnconfirmedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).GetUnconfirmedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Mempool/GetUnconfirmedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).GetUnconfirmedBalance(ctx, req.(*GetUnconfirmedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mempool_SelectTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).SelectTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Mempool/SelectTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).SelectTx(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mempool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Mempool",
	HandlerType: (*MempoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnconfirmedBalance",
			Handler:    _Mempool_GetUnconfirmedBalance_Handler,
		},
		{
			MethodName: "SelectTx",
			Handler:    _Mempool_SelectTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// ChainClient is the client API for Chain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainClient interface {
	RebuildChain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetSyncProgress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SyncProgressResponse, error)
}

type chainClient struct {
	cc *grpc.ClientConn
}

func NewChainClient(cc *grpc.ClientConn) ChainClient {
	return &chainClient{cc}
}

func (c *chainClient) RebuildChain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.Chain/RebuildChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetSyncProgress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SyncProgressResponse, error) {
	out := new(SyncProgressResponse)
	err := c.cc.Invoke(ctx, "/node.Chain/GetSyncProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainServer is the server API for Chain service.
type ChainServer interface {
	RebuildChain(context.Context, *EmptyRequest) (*GenericResponse, error)
	GetSyncProgress(context.Context, *EmptyRequest) (*SyncProgressResponse, error)
}

// UnimplementedChainServer can be embedded to have forward compatible implementations.
type UnimplementedChainServer struct {
}

func (*UnimplementedChainServer) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildChain not implemented")
}
func (*UnimplementedChainServer) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncProgress not implemented")
}

func RegisterChainServer(s *grpc.Server, srv ChainServer) {
	s.RegisterService(&_Chain_serviceDesc, srv)
}

func _Chain_RebuildChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).RebuildChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Chain/RebuildChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).RebuildChain(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_GetSyncProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).GetSyncProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Chain/GetSyncProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).GetSyncProgress(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Chain",
	HandlerType: (*ChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RebuildChain",
			Handler:    _Chain_RebuildChain_Handler,
		},
		{
			MethodName: "GetSyncProgress",
			Handler:    _Chain_GetSyncProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// TransactorClient is the client API for Transactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactorClient interface {
	CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	Stake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type transactorClient struct {
	cc *grpc.ClientConn
}

func NewTransactorClient(cc *grpc.ClientConn) TransactorClient {
	return &transactorClient{cc}
}

func (c *transactorClient) CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/node.Transactor/CallContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/node.Transactor/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/node.Transactor/Bid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) Stake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/node.Transactor/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactorServer is the server API for Transactor service.
type TransactorServer interface {
	CallContract(context.Context, *CallContractRequest) (*TransactionResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransactionResponse, error)
	Bid(context.Context, *BidRequest) (*TransactionResponse, error)
	Stake(context.Context, *StakeRequest) (*TransactionResponse, error)
}

// UnimplementedTransactorServer can be embedded to have forward compatible implementations.
type UnimplementedTransactorServer struct {
}

func (*UnimplementedTransactorServer) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallContract not implemented")
}
func (*UnimplementedTransactorServer) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedTransactorServer) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (*UnimplementedTransactorServer) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}

func RegisterTransactorServer(s *grpc.Server, srv TransactorServer) {
	s.RegisterService(&_Transactor_serviceDesc, srv)
}

func _Transactor_CallContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).CallContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Transactor/CallContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).CallContract(ctx, req.(*CallContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Transactor/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Transactor/Bid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).Bid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Transactor/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).Stake(ctx, req.(*StakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transactor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Transactor",
	HandlerType: (*TransactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallContract",
			Handler:    _Transactor_CallContract_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Transactor_Transfer_Handler,
		},
		{
			MethodName: "Bid",
			Handler:    _Transactor_Bid_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _Transactor_Stake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// ProvisionerClient is the client API for Provisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProvisionerClient interface {
	AutomateStakes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type provisionerClient struct {
	cc *grpc.ClientConn
}

func NewProvisionerClient(cc *grpc.ClientConn) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) AutomateStakes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.Provisioner/AutomateStakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionerServer is the server API for Provisioner service.
type ProvisionerServer interface {
	AutomateStakes(context.Context, *EmptyRequest) (*GenericResponse, error)
}

// UnimplementedProvisionerServer can be embedded to have forward compatible implementations.
type UnimplementedProvisionerServer struct {
}

func (*UnimplementedProvisionerServer) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomateStakes not implemented")
}

func RegisterProvisionerServer(s *grpc.Server, srv ProvisionerServer) {
	s.RegisterService(&_Provisioner_serviceDesc, srv)
}

func _Provisioner_AutomateStakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).AutomateStakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Provisioner/AutomateStakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).AutomateStakes(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provisioner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutomateStakes",
			Handler:    _Provisioner_AutomateStakes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// BlockGeneratorClient is the client API for BlockGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockGeneratorClient interface {
	AutomateBids(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type blockGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewBlockGeneratorClient(cc *grpc.ClientConn) BlockGeneratorClient {
	return &blockGeneratorClient{cc}
}

func (c *blockGeneratorClient) AutomateBids(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.BlockGenerator/AutomateBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockGeneratorServer is the server API for BlockGenerator service.
type BlockGeneratorServer interface {
	AutomateBids(context.Context, *EmptyRequest) (*GenericResponse, error)
}

// UnimplementedBlockGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedBlockGeneratorServer struct {
}

func (*UnimplementedBlockGeneratorServer) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomateBids not implemented")
}

func RegisterBlockGeneratorServer(s *grpc.Server, srv BlockGeneratorServer) {
	s.RegisterService(&_BlockGenerator_serviceDesc, srv)
}

func _BlockGenerator_AutomateBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGeneratorServer).AutomateBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.BlockGenerator/AutomateBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGeneratorServer).AutomateBids(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.BlockGenerator",
	HandlerType: (*BlockGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutomateBids",
			Handler:    _BlockGenerator_AutomateBids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
