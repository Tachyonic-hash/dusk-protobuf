// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type GenericResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericResponse) Reset()         { *m = GenericResponse{} }
func (m *GenericResponse) String() string { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()    {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse.Unmarshal(m, b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
}
func (m *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(m, src)
}
func (m *GenericResponse) XXX_Size() int {
	return xxx_messageInfo_GenericResponse.Size(m)
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

func (m *GenericResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "node.EmptyRequest")
	proto.RegisterType((*GenericResponse)(nil), "node.GenericResponse")
}

func init() {
	proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7)
}

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xa9, 0x04, 0xdd, 0xee, 0x28, 0x2c, 0xc2, 0xbb, 0x0b, 0xab, 0x9c, 0x50, 0x4f, 0x5c,
	0xd8, 0xc3, 0x22, 0x40, 0xab, 0x0a, 0xa1, 0x36, 0x85, 0x70, 0x00, 0x09, 0x25, 0x41, 0x9c, 0xdd,
	0x78, 0x0a, 0x11, 0x89, 0x1d, 0xec, 0x89, 0x68, 0xdf, 0x80, 0x57, 0xe2, 0xed, 0x50, 0x62, 0xa7,
	0xa4, 0x55, 0x28, 0x6a, 0x6f, 0x99, 0xbf, 0xff, 0xf7, 0xcf, 0x68, 0x6c, 0x17, 0x40, 0x2a, 0x81,
	0xd7, 0xa5, 0x56, 0xa4, 0xd8, 0xdd, 0xfa, 0xdb, 0xf7, 0x7e, 0xf2, 0x3c, 0x47, 0xb2, 0x9a, 0x7f,
	0xbf, 0xc0, 0xa2, 0x54, 0x2a, 0xb7, 0xe5, 0xf8, 0x0c, 0xbc, 0xb7, 0x45, 0x49, 0xeb, 0x08, 0x7f,
	0x54, 0x68, 0x68, 0xfc, 0x0c, 0x1e, 0x84, 0x28, 0x51, 0x67, 0x69, 0x84, 0xa6, 0x54, 0xd2, 0x20,
	0xf3, 0x61, 0xa4, 0xdd, 0xf7, 0xd5, 0xe0, 0xc9, 0xe0, 0xe9, 0x69, 0xb4, 0xa9, 0x6f, 0x7e, 0x0f,
	0x61, 0xf8, 0xa5, 0x89, 0x67, 0xb7, 0xe0, 0x05, 0x1a, 0x39, 0xa1, 0xab, 0xcf, 0xaf, 0x9b, 0x49,
	0xac, 0xe6, 0xe2, 0x7d, 0x66, 0xc5, 0x0f, 0x8a, 0x8b, 0x36, 0x7f, 0x7c, 0x87, 0xbd, 0x00, 0xa8,
	0x15, 0x07, 0x3e, 0xec, 0x7a, 0xf6, 0x61, 0x13, 0x38, 0xb3, 0xe9, 0xef, 0xb4, 0x2a, 0x62, 0x44,
	0x71, 0x48, 0xcf, 0x19, 0x9c, 0x07, 0x39, 0x72, 0x6d, 0x9b, 0xce, 0x39, 0xf1, 0x05, 0x37, 0xc8,
	0x9c, 0xb9, 0xbb, 0x13, 0xff, 0xd2, 0x6a, 0x3b, 0x7b, 0x69, 0x06, 0x18, 0x25, 0x9a, 0x4b, 0xb3,
	0x44, 0xcd, 0x9c, 0xa9, 0xad, 0x5b, 0xf6, 0xd1, 0xae, 0xbc, 0x81, 0x5f, 0xc3, 0x49, 0x8c, 0x52,
	0xcc, 0x32, 0xc1, 0xae, 0xdc, 0xd8, 0xf5, 0x2f, 0xd2, 0x54, 0x26, 0x59, 0xfd, 0x1f, 0x7f, 0x03,
	0xa7, 0x35, 0x1e, 0x13, 0xff, 0x8e, 0x47, 0x05, 0x04, 0x70, 0x31, 0xad, 0x48, 0x15, 0x9c, 0xb0,
	0xc3, 0x99, 0xc3, 0x36, 0x10, 0xd4, 0xd7, 0x85, 0xec, 0x0e, 0x63, 0xe2, 0x54, 0xf5, 0xf3, 0xbe,
	0xd5, 0xba, 0xbe, 0x4e, 0xc8, 0x4b, 0x80, 0x10, 0x69, 0x2a, 0x84, 0x46, 0xd3, 0xcf, 0xf7, 0x1f,
	0xa1, 0x6d, 0x1e, 0xaf, 0x65, 0xfa, 0x49, 0xab, 0xaf, 0xff, 0x84, 0x5d, 0xf3, 0xae, 0xaf, 0x13,
	0x72, 0xdb, 0x34, 0x9f, 0xf1, 0x9c, 0xcb, 0x74, 0xef, 0xf1, 0x3b, 0xcb, 0xd6, 0x09, 0x7a, 0x21,
	0x52, 0xb2, 0x7a, 0x9f, 0x19, 0x52, 0x7a, 0xdd, 0x0b, 0x3f, 0x76, 0xfb, 0x6f, 0x4d, 0x7f, 0xf1,
	0x9b, 0x5f, 0x03, 0x38, 0xf9, 0x68, 0x1f, 0x23, 0x9b, 0xc3, 0x65, 0x88, 0xf4, 0x59, 0xa6, 0x4a,
	0x2e, 0x33, 0x5d, 0xa0, 0x38, 0x6a, 0xa0, 0x57, 0x30, 0x8a, 0x31, 0xc7, 0x94, 0x92, 0x55, 0xfb,
	0x14, 0x6c, 0xdd, 0x92, 0x17, 0xdb, 0xe2, 0x66, 0x94, 0x39, 0xdc, 0x0b, 0xbe, 0xf1, 0x4c, 0xb2,
	0x09, 0x78, 0x11, 0x2e, 0xaa, 0x2c, 0x17, 0xb6, 0x3e, 0xe4, 0x32, 0x2c, 0x86, 0xcd, 0x5f, 0xca,
	0xf3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xe8, 0xf2, 0xe3, 0x83, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	CreateWallet(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	LoadWallet(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	CreateFromSeed(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	ClearWalletDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	SendBid(ctx context.Context, in *ConsensusTxRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	SendStake(ctx context.Context, in *ConsensusTxRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	AutomateConsensusTxs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetWalletStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WalletStatusResponse, error)
	GetAddress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	GetSyncProgress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SyncProgressResponse, error)
	GetBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetTxHistory(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TxHistoryResponse, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) CreateWallet(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) LoadWallet(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/LoadWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateFromSeed(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/CreateFromSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ClearWalletDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/ClearWalletDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SendBid(ctx context.Context, in *ConsensusTxRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/SendBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SendStake(ctx context.Context, in *ConsensusTxRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/SendStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AutomateConsensusTxs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/AutomateConsensusTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWalletStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WalletStatusResponse, error) {
	out := new(WalletStatusResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetWalletStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAddress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetSyncProgress(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SyncProgressResponse, error) {
	out := new(SyncProgressResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetSyncProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTxHistory(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TxHistoryResponse, error) {
	out := new(TxHistoryResponse)
	err := c.cc.Invoke(ctx, "/node.Wallet/GetTxHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	CreateWallet(context.Context, *CreateRequest) (*LoadResponse, error)
	LoadWallet(context.Context, *LoadRequest) (*LoadResponse, error)
	CreateFromSeed(context.Context, *CreateRequest) (*LoadResponse, error)
	ClearWalletDatabase(context.Context, *EmptyRequest) (*GenericResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	SendBid(context.Context, *ConsensusTxRequest) (*TransferResponse, error)
	SendStake(context.Context, *ConsensusTxRequest) (*TransferResponse, error)
	AutomateConsensusTxs(context.Context, *EmptyRequest) (*GenericResponse, error)
	GetWalletStatus(context.Context, *EmptyRequest) (*WalletStatusResponse, error)
	GetAddress(context.Context, *EmptyRequest) (*LoadResponse, error)
	GetSyncProgress(context.Context, *EmptyRequest) (*SyncProgressResponse, error)
	GetBalance(context.Context, *EmptyRequest) (*BalanceResponse, error)
	GetTxHistory(context.Context, *EmptyRequest) (*TxHistoryResponse, error)
}

// UnimplementedWalletServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (*UnimplementedWalletServer) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedWalletServer) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadWallet not implemented")
}
func (*UnimplementedWalletServer) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFromSeed not implemented")
}
func (*UnimplementedWalletServer) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearWalletDatabase not implemented")
}
func (*UnimplementedWalletServer) Transfer(ctx context.Context, req *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedWalletServer) SendBid(ctx context.Context, req *ConsensusTxRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (*UnimplementedWalletServer) SendStake(ctx context.Context, req *ConsensusTxRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStake not implemented")
}
func (*UnimplementedWalletServer) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomateConsensusTxs not implemented")
}
func (*UnimplementedWalletServer) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletStatus not implemented")
}
func (*UnimplementedWalletServer) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedWalletServer) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncProgress not implemented")
}
func (*UnimplementedWalletServer) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedWalletServer) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxHistory not implemented")
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWallet(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_LoadWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).LoadWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/LoadWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).LoadWallet(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateFromSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateFromSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/CreateFromSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateFromSeed(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ClearWalletDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ClearWalletDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/ClearWalletDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ClearWalletDatabase(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SendBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SendBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/SendBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SendBid(ctx, req.(*ConsensusTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SendStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SendStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/SendStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SendStake(ctx, req.(*ConsensusTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AutomateConsensusTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AutomateConsensusTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/AutomateConsensusTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AutomateConsensusTxs(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWalletStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAddress(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetSyncProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetSyncProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetSyncProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetSyncProgress(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBalance(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTxHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTxHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Wallet/GetTxHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTxHistory(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _Wallet_CreateWallet_Handler,
		},
		{
			MethodName: "LoadWallet",
			Handler:    _Wallet_LoadWallet_Handler,
		},
		{
			MethodName: "CreateFromSeed",
			Handler:    _Wallet_CreateFromSeed_Handler,
		},
		{
			MethodName: "ClearWalletDatabase",
			Handler:    _Wallet_ClearWalletDatabase_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Wallet_Transfer_Handler,
		},
		{
			MethodName: "SendBid",
			Handler:    _Wallet_SendBid_Handler,
		},
		{
			MethodName: "SendStake",
			Handler:    _Wallet_SendStake_Handler,
		},
		{
			MethodName: "AutomateConsensusTxs",
			Handler:    _Wallet_AutomateConsensusTxs_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _Wallet_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Wallet_GetAddress_Handler,
		},
		{
			MethodName: "GetSyncProgress",
			Handler:    _Wallet_GetSyncProgress_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Wallet_GetBalance_Handler,
		},
		{
			MethodName: "GetTxHistory",
			Handler:    _Wallet_GetTxHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// MempoolClient is the client API for Mempool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MempoolClient interface {
	GetUnconfirmedBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	SelectTx(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
}

type mempoolClient struct {
	cc grpc.ClientConnInterface
}

func NewMempoolClient(cc grpc.ClientConnInterface) MempoolClient {
	return &mempoolClient{cc}
}

func (c *mempoolClient) GetUnconfirmedBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/node.Mempool/GetUnconfirmedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolClient) SelectTx(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	out := new(SelectResponse)
	err := c.cc.Invoke(ctx, "/node.Mempool/SelectTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MempoolServer is the server API for Mempool service.
type MempoolServer interface {
	GetUnconfirmedBalance(context.Context, *EmptyRequest) (*BalanceResponse, error)
	SelectTx(context.Context, *SelectRequest) (*SelectResponse, error)
}

// UnimplementedMempoolServer can be embedded to have forward compatible implementations.
type UnimplementedMempoolServer struct {
}

func (*UnimplementedMempoolServer) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnconfirmedBalance not implemented")
}
func (*UnimplementedMempoolServer) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTx not implemented")
}

func RegisterMempoolServer(s *grpc.Server, srv MempoolServer) {
	s.RegisterService(&_Mempool_serviceDesc, srv)
}

func _Mempool_GetUnconfirmedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).GetUnconfirmedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Mempool/GetUnconfirmedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).GetUnconfirmedBalance(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mempool_SelectTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).SelectTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Mempool/SelectTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).SelectTx(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mempool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Mempool",
	HandlerType: (*MempoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnconfirmedBalance",
			Handler:    _Mempool_GetUnconfirmedBalance_Handler,
		},
		{
			MethodName: "SelectTx",
			Handler:    _Mempool_SelectTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// ChainClient is the client API for Chain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainClient interface {
	RebuildChain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type chainClient struct {
	cc grpc.ClientConnInterface
}

func NewChainClient(cc grpc.ClientConnInterface) ChainClient {
	return &chainClient{cc}
}

func (c *chainClient) RebuildChain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/node.Chain/RebuildChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainServer is the server API for Chain service.
type ChainServer interface {
	RebuildChain(context.Context, *EmptyRequest) (*GenericResponse, error)
}

// UnimplementedChainServer can be embedded to have forward compatible implementations.
type UnimplementedChainServer struct {
}

func (*UnimplementedChainServer) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildChain not implemented")
}

func RegisterChainServer(s *grpc.Server, srv ChainServer) {
	s.RegisterService(&_Chain_serviceDesc, srv)
}

func _Chain_RebuildChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).RebuildChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Chain/RebuildChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).RebuildChain(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Chain",
	HandlerType: (*ChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RebuildChain",
			Handler:    _Chain_RebuildChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
