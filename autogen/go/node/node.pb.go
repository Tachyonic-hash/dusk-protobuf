// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxType int32

const (
	// CoinbaseType is the identifier for a block coinbase
	TxType_COINBASE TxType = 0
	// BidType is the identifier for a blind bid
	TxType_BID TxType = 1
	// StakeType is the identifier for a stake
	TxType_STAKE TxType = 2
	// StandardType is the identifier for a standard transaction
	TxType_STANDARD TxType = 3
	// TimelockType is the identifier for a standard time-locked transaction
	TxType_TIMELOCK TxType = 4
	// ContractType is the identifier for a smart contract transaction
	TxType_CONTRACT TxType = 5
)

var TxType_name = map[int32]string{
	0: "COINBASE",
	1: "BID",
	2: "STAKE",
	3: "STANDARD",
	4: "TIMELOCK",
	5: "CONTRACT",
}

var TxType_value = map[string]int32{
	"COINBASE": 0,
	"BID":      1,
	"STAKE":    2,
	"STANDARD": 3,
	"TIMELOCK": 4,
	"CONTRACT": 5,
}

func (x TxType) String() string {
	return proto.EnumName(TxType_name, int32(x))
}

func (TxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

type Tx struct {
	Type                 TxType   `protobuf:"varint,1,opt,name=type,proto3,enum=node.TxType" json:"type,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	LockTime             uint64   `protobuf:"fixed64,3,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *Tx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tx.Unmarshal(m, b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return xxx_messageInfo_Tx.Size(m)
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetType() TxType {
	if m != nil {
		return m.Type
	}
	return TxType_COINBASE
}

func (m *Tx) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tx) GetLockTime() uint64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

// SelectRequest can specify an ID or a transaction type or none
type SelectRequest struct {
	Types                []TxType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=node.TxType" json:"types,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectRequest) Reset()         { *m = SelectRequest{} }
func (m *SelectRequest) String() string { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()    {}
func (*SelectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *SelectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SelectRequest.Unmarshal(m, b)
}
func (m *SelectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SelectRequest.Marshal(b, m, deterministic)
}
func (m *SelectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectRequest.Merge(m, src)
}
func (m *SelectRequest) XXX_Size() int {
	return xxx_messageInfo_SelectRequest.Size(m)
}
func (m *SelectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SelectRequest proto.InternalMessageInfo

func (m *SelectRequest) GetTypes() []TxType {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *SelectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SelectResponse struct {
	//Note: the response was a single string describing the transactions.
	//It should actually be responsibility of the caller to format the data or handle it otherwise
	//string msg = 1;
	Result               []*Tx    `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectResponse) Reset()         { *m = SelectResponse{} }
func (m *SelectResponse) String() string { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()    {}
func (*SelectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}

func (m *SelectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SelectResponse.Unmarshal(m, b)
}
func (m *SelectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SelectResponse.Marshal(b, m, deterministic)
}
func (m *SelectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectResponse.Merge(m, src)
}
func (m *SelectResponse) XXX_Size() int {
	return xxx_messageInfo_SelectResponse.Size(m)
}
func (m *SelectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SelectResponse proto.InternalMessageInfo

func (m *SelectResponse) GetResult() []*Tx {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("node.TxType", TxType_name, TxType_value)
	proto.RegisterType((*Tx)(nil), "node.Tx")
	proto.RegisterType((*SelectRequest)(nil), "node.SelectRequest")
	proto.RegisterType((*SelectResponse)(nil), "node.SelectResponse")
}

func init() {
	proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7)
}

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x6f, 0xb3, 0x30,
	0x10, 0xc5, 0x63, 0x20, 0x7c, 0xe4, 0xbe, 0x14, 0x59, 0x6e, 0x07, 0xd4, 0x2e, 0x16, 0x13, 0xea,
	0x90, 0x81, 0x0e, 0x1d, 0x2b, 0x02, 0x0c, 0x28, 0x2d, 0x91, 0x8c, 0xf7, 0x4a, 0x0d, 0x37, 0xa0,
	0x92, 0x98, 0x06, 0x47, 0x22, 0xff, 0x7d, 0x05, 0x6e, 0x86, 0xb4, 0x9b, 0xfd, 0xee, 0xf9, 0xf7,
	0x9e, 0x0f, 0xe0, 0xa0, 0x6a, 0x5c, 0x75, 0x47, 0xa5, 0x15, 0x73, 0xc6, 0x73, 0x58, 0x81, 0x25,
	0x07, 0xc6, 0xc1, 0xd1, 0xe7, 0x0e, 0x03, 0xc2, 0x49, 0xe4, 0xc7, 0xcb, 0xd5, 0x64, 0x93, 0x83,
	0x3c, 0x77, 0x28, 0xa6, 0x09, 0xf3, 0xc1, 0x6a, 0xea, 0xc0, 0xe2, 0x24, 0x5a, 0x08, 0xab, 0xa9,
	0xd9, 0x03, 0x2c, 0x5a, 0xb5, 0xfb, 0x7c, 0xd7, 0xcd, 0x1e, 0x03, 0x9b, 0x93, 0xc8, 0x15, 0xde,
	0x28, 0xc8, 0x66, 0x8f, 0x61, 0x0a, 0x37, 0x15, 0xb6, 0xb8, 0xd3, 0x02, 0xbf, 0x4e, 0xd8, 0x6b,
	0x16, 0xc2, 0x7c, 0xa4, 0xf4, 0x01, 0xe1, 0xf6, 0x9f, 0x00, 0x33, 0xfa, 0x9d, 0x10, 0xc6, 0xe0,
	0x5f, 0x20, 0x7d, 0xa7, 0x0e, 0x3d, 0x32, 0x0e, 0xee, 0x11, 0xfb, 0x53, 0xab, 0x27, 0xcc, 0xff,
	0xd8, 0xbb, 0x60, 0xc4, 0x8f, 0xfe, 0x28, 0xc1, 0x35, 0x50, 0xb6, 0x04, 0x2f, 0xdd, 0x16, 0xe5,
	0x3a, 0xa9, 0x72, 0x3a, 0x63, 0xff, 0xc0, 0x5e, 0x17, 0x19, 0x25, 0x6c, 0x01, 0xf3, 0x4a, 0x26,
	0x9b, 0x9c, 0x5a, 0xa3, 0xa3, 0x92, 0x49, 0x99, 0x25, 0x22, 0xa3, 0xf6, 0x78, 0x93, 0xc5, 0x5b,
	0xfe, 0xba, 0x4d, 0x37, 0xd4, 0x31, 0xaf, 0x4b, 0x29, 0x92, 0x54, 0xd2, 0x79, 0xfc, 0x02, 0x4e,
	0xa9, 0x6a, 0x64, 0xcf, 0xe0, 0x99, 0x46, 0x72, 0x60, 0xb7, 0x26, 0xfb, 0xea, 0x9b, 0xf7, 0x77,
	0xd7, 0xa2, 0xa9, 0x1d, 0xce, 0x3e, 0xdc, 0x69, 0xe3, 0x4f, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0x30, 0x61, 0x3d, 0x7f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Mempool rpc
	SelectTx(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) SelectTx(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	out := new(SelectResponse)
	err := c.cc.Invoke(ctx, "/node.Node/SelectTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Mempool rpc
	SelectTx(context.Context, *SelectRequest) (*SelectResponse, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTx not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_SelectTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SelectTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/SelectTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SelectTx(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectTx",
			Handler:    _Node_SelectTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
