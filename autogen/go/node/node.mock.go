// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptatum",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 819,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 352,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 58,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 747,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 120,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 196,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 331,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 879,
					Type:      1,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 3,
					Id:   "60507eff-24b0-407b-9650-7f25fdd3a762",
				},
				&Tx{
					Type: 3,
					Id:   "6b4c0818-b0ac-4280-bf39-035b88468d12",
				},
				&Tx{
					Type: 1,
					Id:   "c88fa9ce-ca00-44eb-90c5-4b0190268302",
				},
				&Tx{
					Type: 4,
					Id:   "4d8a9264-8c76-4ac7-ad3b-b6a22efa003e",
				},
				&Tx{
					Type: 3,
					Id:   "cefcc080-a7c2-41b4-8c62-141c70ef83dc",
				},
				&Tx{
					Type: 2,
					Id:   "4f2ca73c-8b6e-43ae-91f7-aa7160b9eb79",
				},
				&Tx{
					Type: 5,
					Id:   "2ad7b90c-c5df-48c8-8493-100525ab7121",
				},
				&Tx{
					Type: 4,
					Id:   "cd7a9044-360e-42f0-b7b5-8dbbc50e1b31",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "aut",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 68.5604,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "unde",
		}
	return res, nil
}
