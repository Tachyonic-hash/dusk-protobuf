// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "tempore",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 93,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 555,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 281,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 471,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 470,
					Type:      5,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 639,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 504,
					Type:      5,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 514,
					Type:      0,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 5,
					Id:   "81601f42-e35e-4358-99a9-21789819ecea",
				},
				&Tx{
					Type: 4,
					Id:   "a89420c0-dca0-4f99-8e78-7c561a65dfd1",
				},
				&Tx{
					Type: 2,
					Id:   "e252c5ab-1839-45de-98f2-a1aba79d63c0",
				},
				&Tx{
					Type: 5,
					Id:   "5c01b786-3613-48a2-9291-7f919b52af07",
				},
				&Tx{
					Type: 4,
					Id:   "d9a6ba60-af3f-4eb9-a6bf-680d2169fac3",
				},
				&Tx{
					Type: 4,
					Id:   "134bfef7-59bb-454d-9962-b75be9724cfa",
				},
				&Tx{
					Type: 1,
					Id:   "fdf76f2c-56f8-4401-b8e4-5dfd2fbee1d6",
				},
				&Tx{
					Type: 2,
					Id:   "f7886176-fc09-48cd-9ce9-1834e6840d0b",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quasi",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 416.4404,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "tempora",
		}
	return res, nil
}
