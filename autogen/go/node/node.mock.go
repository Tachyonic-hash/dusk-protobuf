// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "vel",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  1,
					Timestamp:  937,
					Type:       3,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  175,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  819,
					Type:       1,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  951,
					Type:       6,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  739,
					Type:       6,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  267,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  278,
					Type:       7,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  349,
					Type:       0,
					Obfuscated: false,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 6,
					Id:   "6955fabf-81a8-440f-9e4d-d3e7b95bed9d",
				},
				&Tx{
					Type: 5,
					Id:   "949ab06e-37ec-48a0-bb3f-0850b2a54491",
				},
				&Tx{
					Type: 6,
					Id:   "49f782db-9c8b-44be-951c-358d6f36af1e",
				},
				&Tx{
					Type: 3,
					Id:   "33959a1a-0b25-4352-a11b-7229dfc6f118",
				},
				&Tx{
					Type: 6,
					Id:   "94f7033c-af3e-4757-8a5d-93925fb512ce",
				},
				&Tx{
					Type: 2,
					Id:   "6dc9495b-2bc7-4834-a64e-6f9ff51a78f5",
				},
				&Tx{
					Type: 5,
					Id:   "68a0a34e-3752-4dc1-bd17-3e0c485d4231",
				},
				&Tx{
					Type: 5,
					Id:   "1a9064a8-75fb-4c41-9a3a-df1b93c146a0",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "tenetur",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 370.4123,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "enim",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ullam",
		}
	return res, nil
}
