// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "ut",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ipsum",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "nulla",
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  0,
					Timestamp:  672,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  528,
					Type:       6,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  572,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  626,
					Type:       0,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  270,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  846,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  541,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  933,
					Type:       7,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 0,
					Id:   "89c41b4c-b262-40cd-ae62-87d3032e1e39",
				},
				&Tx{
					Type: 0,
					Id:   "a45f325d-54c3-4f1e-9c5f-ce71ac096012",
				},
				&Tx{
					Type: 3,
					Id:   "ed668413-8c0a-44aa-830d-a116161ec5f3",
				},
				&Tx{
					Type: 6,
					Id:   "bb5ecfd1-622d-42ce-8a5c-eb413a2c850a",
				},
				&Tx{
					Type: 2,
					Id:   "22c555ee-eba2-4ca7-bcae-5584554433bb",
				},
				&Tx{
					Type: 0,
					Id:   "511ebc24-b3e1-44f7-b0cf-02d2f435929b",
				},
				&Tx{
					Type: 3,
					Id:   "59d8add7-889d-483b-a661-f13d09c543a3",
				},
				&Tx{
					Type: 6,
					Id:   "033f6257-9a7a-4f3d-9c24-f4a206b70f14",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "cumque",
		}
	return res, nil
}

type SynchronizerMock struct{}

func (m *SynchronizerMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 932.4377,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "nisi",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptate",
		}
	return res, nil
}
