// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "omnis",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 964,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 632,
					Type:      3,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 356,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 410,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 208,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 78,
					Type:      0,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 668,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 841,
					Type:      2,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 3,
					Id:   "2177875b-eae5-4f51-8e97-98bfd3d937a8",
				},
				&Tx{
					Type: 2,
					Id:   "84319243-69c9-48fa-a1c4-5e41e828d9b6",
				},
				&Tx{
					Type: 5,
					Id:   "09bbb86e-bcbd-4ca2-9a71-12ea30ca8d4e",
				},
				&Tx{
					Type: 5,
					Id:   "e7f4dba6-57b8-4e5e-971d-769bbf30f67c",
				},
				&Tx{
					Type: 2,
					Id:   "e475bd96-e53b-4521-9e49-66651d9f02ed",
				},
				&Tx{
					Type: 4,
					Id:   "5cc657bb-95ca-4b39-9f1d-6d15c7a16f49",
				},
				&Tx{
					Type: 2,
					Id:   "3ef5ee4c-ef73-4f1c-9b11-800a04acb3d5",
				},
				&Tx{
					Type: 5,
					Id:   "ec150272-97c8-4f18-8f5d-2cb54d098637",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "eos",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 507.9504,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quae",
		}
	return res, nil
}
