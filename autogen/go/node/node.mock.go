// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "totam",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  1,
					Timestamp:  335,
					Type:       7,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  873,
					Type:       2,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  980,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  7,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  165,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  785,
					Type:       6,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  659,
					Type:       2,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  255,
					Type:       6,
					Obfuscated: false,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 4,
					Id:   "734f5d3a-45eb-45cf-a97b-bf8471f64386",
				},
				&Tx{
					Type: 0,
					Id:   "e19aecec-4dae-4fea-ba70-55a783eea7be",
				},
				&Tx{
					Type: 6,
					Id:   "a6674411-bd7b-4d06-882c-fe4b76cdb747",
				},
				&Tx{
					Type: 7,
					Id:   "08f208fa-5cae-46aa-acab-c18a3482cfd6",
				},
				&Tx{
					Type: 2,
					Id:   "d3aa0f2d-8cb3-4fa5-8235-de6455c1eefc",
				},
				&Tx{
					Type: 6,
					Id:   "50e00d66-050c-4b48-9ff8-9503320409e1",
				},
				&Tx{
					Type: 0,
					Id:   "cf0315ba-c79e-478f-9376-4a05d4ec0317",
				},
				&Tx{
					Type: 2,
					Id:   "a9ee4190-2671-48ad-ad40-c3010c8b67a2",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "et",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 155.4994,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "pariatur",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quidem",
		}
	return res, nil
}
