// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "aut",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "omnis",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "nobis",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  1,
					Timestamp:  27,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  27,
					Type:       1,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  126,
					Type:       1,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  11,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  957,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  355,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  456,
					Type:       7,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  366,
					Type:       7,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 2,
					Id:   "c35ad897-cba1-44ee-9073-3d6a38c76265",
				},
				&Tx{
					Type: 6,
					Id:   "0b71b489-5227-44d1-a597-573398e8a998",
				},
				&Tx{
					Type: 6,
					Id:   "20c1ae52-084f-4a44-8485-ecb300ea51c5",
				},
				&Tx{
					Type: 5,
					Id:   "3db7938b-3f0f-4863-875f-af7d7cdca71e",
				},
				&Tx{
					Type: 7,
					Id:   "bcc8702d-2435-4566-9f57-e48480735368",
				},
				&Tx{
					Type: 7,
					Id:   "5d6fa50c-6f0a-4478-90b2-58971a9ac4bc",
				},
				&Tx{
					Type: 1,
					Id:   "732a6fad-d8a8-4abe-87cf-fe2fab253ffb",
				},
				&Tx{
					Type: 4,
					Id:   "1d35628f-a3e7-448d-95df-f182f01355a9",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptatem",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 557.3751,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptatibus",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ut",
		}
	return res, nil
}
