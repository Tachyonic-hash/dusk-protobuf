// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "ducimus",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "est",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "vel",
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  0,
					Timestamp:  638,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  789,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  191,
					Type:       2,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  830,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  70,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  780,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  147,
					Type:       6,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  467,
					Type:       1,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 5,
					Id:   "8aa2b95e-1f90-4693-8323-e01321c763e2",
				},
				&Tx{
					Type: 6,
					Id:   "99638eda-9922-4e76-b5b4-1e582181d329",
				},
				&Tx{
					Type: 7,
					Id:   "865d0ea3-c62b-49b6-9aaf-64d3738ed971",
				},
				&Tx{
					Type: 2,
					Id:   "902d3b72-d70c-444d-baad-f380d28f7d82",
				},
				&Tx{
					Type: 7,
					Id:   "ca579be4-48d1-4d28-868b-e82bd74cb6f9",
				},
				&Tx{
					Type: 6,
					Id:   "afac3c33-a75f-4367-b620-958b8ec26471",
				},
				&Tx{
					Type: 5,
					Id:   "4a0de05e-8a47-4cb6-9839-6821cd808f8e",
				},
				&Tx{
					Type: 4,
					Id:   "0ddf32cf-3827-4010-8f1f-83ac00ecff1b",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "sint",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 907.1120,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "repellat",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "beatae",
		}
	return res, nil
}
