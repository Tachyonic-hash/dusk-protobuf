// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "corrupti",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 67,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 459,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 288,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 65,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 397,
					Type:      3,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 318,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 540,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 607,
					Type:      4,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 0,
					Id:   "99f8e8ba-57f3-4190-bf89-afd9c8354f45",
				},
				&Tx{
					Type: 2,
					Id:   "c9c0a77a-cb95-4ffc-ac1c-2fb094f431bf",
				},
				&Tx{
					Type: 1,
					Id:   "981cc87e-19b9-43a0-9b7e-7fe6642a80a5",
				},
				&Tx{
					Type: 2,
					Id:   "9e67f7b1-6e8b-4f8b-826d-990c6bf7ddee",
				},
				&Tx{
					Type: 4,
					Id:   "0c70c402-5482-4aff-af53-64e88d81cff1",
				},
				&Tx{
					Type: 3,
					Id:   "9ef0af53-35c2-475a-93ff-a3c3c477db5f",
				},
				&Tx{
					Type: 4,
					Id:   "bf926860-8c01-4e6f-aae2-9999df731262",
				},
				&Tx{
					Type: 4,
					Id:   "f4fd01c6-46ab-42ba-a3c4-815962ec8f95",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "omnis",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 735.7060,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "nobis",
		}
	return res, nil
}
