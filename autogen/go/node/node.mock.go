// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "sapiente",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 495,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 685,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 455,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 281,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 284,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 792,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 868,
					Type:      3,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 338,
					Type:      4,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 0,
					Id:   "ccbc83fb-ec52-4fca-b3d2-22f0270c3462",
				},
				&Tx{
					Type: 3,
					Id:   "dd850141-bee0-44ba-be57-fa252b270e07",
				},
				&Tx{
					Type: 2,
					Id:   "c79818d6-3958-43b9-8538-384a8899edb5",
				},
				&Tx{
					Type: 3,
					Id:   "dcea1fd1-2300-4878-a487-f4673ba979a7",
				},
				&Tx{
					Type: 3,
					Id:   "75d6218b-3ac4-418c-8acd-8c8307bf2b26",
				},
				&Tx{
					Type: 5,
					Id:   "05fab048-7cc5-467e-93b5-43e64824316e",
				},
				&Tx{
					Type: 5,
					Id:   "a7de5afd-72aa-4bd6-bdb5-ceb973ea9567",
				},
				&Tx{
					Type: 4,
					Id:   "6c7c8675-2757-47ce-aa66-71fd84a388eb",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "veniam",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 774.4683,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptas",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quisquam",
		}
	return res, nil
}
