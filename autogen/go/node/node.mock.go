// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "unde",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 182,
					Type:      0,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 71,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 463,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 932,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 19,
					Type:      5,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 233,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 485,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 591,
					Type:      4,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 1,
					Id:   "39770d55-bc06-4b0e-b3db-ee6a01a2236e",
				},
				&Tx{
					Type: 0,
					Id:   "8fef511c-eae9-4b08-9d94-af5996003462",
				},
				&Tx{
					Type: 5,
					Id:   "d18aa792-a9e5-494a-868e-58040db74d98",
				},
				&Tx{
					Type: 3,
					Id:   "f000f10a-2db8-401c-98b0-56390e297450",
				},
				&Tx{
					Type: 4,
					Id:   "0d014402-5579-4cdb-b7c3-e4641e206d3f",
				},
				&Tx{
					Type: 3,
					Id:   "3f9a338b-dced-42ff-b673-fe898c7b05c2",
				},
				&Tx{
					Type: 0,
					Id:   "7bbe1e26-7b07-4ed1-84e7-09c76f96111f",
				},
				&Tx{
					Type: 5,
					Id:   "6e9cf5a2-f3c4-4c3f-9f2d-32aac7196ed0",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "modi",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 271.2030,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "et",
		}
	return res, nil
}
