// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "consequatur",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 984,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 591,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 735,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 729,
					Type:      3,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 958,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 65,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 488,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 30,
					Type:      3,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 4,
					Id:   "7f4a14b7-4ec8-4b5c-bc75-667ebb387172",
				},
				&Tx{
					Type: 0,
					Id:   "23d58ed9-42ce-4d1e-a424-30547b894274",
				},
				&Tx{
					Type: 3,
					Id:   "2dbf64ac-ffd5-48dd-8137-b237903d7df3",
				},
				&Tx{
					Type: 0,
					Id:   "f6b31e77-05d7-4fb7-9f91-cf70f5000e2b",
				},
				&Tx{
					Type: 5,
					Id:   "da78d88d-bd59-493e-a301-1a826f42faa3",
				},
				&Tx{
					Type: 0,
					Id:   "75c9e617-d1f3-4db1-8709-114158bc1734",
				},
				&Tx{
					Type: 4,
					Id:   "35453215-efb4-4b23-8c05-abbdf476e3c0",
				},
				&Tx{
					Type: 5,
					Id:   "e6e2eca0-34d6-4a06-8683-f6efa690eb43",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "eum",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 803.77,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quod",
		}
	return res, nil
}
