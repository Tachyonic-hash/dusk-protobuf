// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "tenetur",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 419,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 325,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 830,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 764,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 738,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 267,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 649,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 30,
					Type:      1,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 1,
					Id:   "7e2139d9-6d1c-4161-9f6c-bb678480f15f",
				},
				&Tx{
					Type: 3,
					Id:   "504f6be4-98cf-4714-a8d9-e970645f77b2",
				},
				&Tx{
					Type: 4,
					Id:   "2a28c284-0a49-4b1d-b11f-5cebbfefc448",
				},
				&Tx{
					Type: 5,
					Id:   "9b292343-aa5f-437c-9a83-c12769b84f89",
				},
				&Tx{
					Type: 4,
					Id:   "322c508a-5ba2-4e00-909e-902cc14796e1",
				},
				&Tx{
					Type: 4,
					Id:   "e8c82ed5-839f-45fc-a4d1-186c3cc3bce3",
				},
				&Tx{
					Type: 5,
					Id:   "eb6a4d8c-fee6-495f-bab5-c4eb6f7ba23c",
				},
				&Tx{
					Type: 1,
					Id:   "f6c565eb-30bf-4101-9fb0-59aca7ddb843",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "eius",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 133.8818,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "sed",
		}
	return res, nil
}
