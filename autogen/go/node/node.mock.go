// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "facere",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 338,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 491,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 802,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 978,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 980,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 28,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 124,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 327,
					Type:      2,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 2,
					Id:   "191c11df-9606-4a04-9754-9902db5bad17",
				},
				&Tx{
					Type: 3,
					Id:   "fc024024-64ca-4edb-bb78-cc19758accb7",
				},
				&Tx{
					Type: 4,
					Id:   "7c04d8b4-d769-4ed3-bb91-06b462d0a3f9",
				},
				&Tx{
					Type: 3,
					Id:   "2c5a5b0b-e363-4017-9cfd-6f136ff9803a",
				},
				&Tx{
					Type: 5,
					Id:   "a51a42bc-f319-465a-ac4d-56a4c2ddc756",
				},
				&Tx{
					Type: 2,
					Id:   "cff6c8cb-fe25-472c-bbbb-25742d5a542b",
				},
				&Tx{
					Type: 4,
					Id:   "b6df7a41-df7d-4a0c-aa2d-1b009c0181be",
				},
				&Tx{
					Type: 5,
					Id:   "07f87c72-8d6f-46c5-8926-4d4faba4ab5f",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "vel",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 176.208,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "officiis",
		}
	return res, nil
}
