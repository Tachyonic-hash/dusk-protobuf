// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "sint",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 841,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 123,
					Type:      1,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 111,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 615,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 985,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 468,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 834,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 935,
					Type:      4,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 0,
					Id:   "0e4c6653-d80a-44b3-829d-5183c2caa3cd",
				},
				&Tx{
					Type: 3,
					Id:   "698cbd59-c49f-4763-8d6b-dd2d8475c5a4",
				},
				&Tx{
					Type: 4,
					Id:   "befa1500-e787-4dd5-9337-177bc0bd52e8",
				},
				&Tx{
					Type: 5,
					Id:   "d7e7dbb9-3c8f-4002-805d-441c04776e8b",
				},
				&Tx{
					Type: 2,
					Id:   "887d7105-d579-47cf-af40-61a020376918",
				},
				&Tx{
					Type: 5,
					Id:   "5bdbfdb5-44a1-4e04-9c03-e86a7f386c16",
				},
				&Tx{
					Type: 1,
					Id:   "6edda45f-29d1-421c-b3ac-55ec493b82a9",
				},
				&Tx{
					Type: 5,
					Id:   "1704dabe-f799-4504-8133-163e89b2ddc9",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "atque",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 693.4386,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "deserunt",
		}
	return res, nil
}
