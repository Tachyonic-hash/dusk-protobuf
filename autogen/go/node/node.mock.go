// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "inventore",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 9,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 960,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 812,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 135,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 109,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 792,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 714,
					Type:      0,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 40,
					Type:      0,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 1,
					Id:   "a4a09104-3391-4582-875a-4fbccaad7b86",
				},
				&Tx{
					Type: 2,
					Id:   "ab00ab47-c247-45d9-92c4-19e1834e1f8e",
				},
				&Tx{
					Type: 0,
					Id:   "e84961b7-f0d0-425b-be22-2dc8d15646ac",
				},
				&Tx{
					Type: 4,
					Id:   "376840d0-865b-4929-b459-ed6741f4333c",
				},
				&Tx{
					Type: 4,
					Id:   "a5def498-f1f3-4a31-b3bb-8c2193f420a5",
				},
				&Tx{
					Type: 5,
					Id:   "c88a62e8-13b0-414f-b427-b07b6d9d997a",
				},
				&Tx{
					Type: 3,
					Id:   "0f90cf6b-8a05-4c20-922c-6004a269902f",
				},
				&Tx{
					Type: 4,
					Id:   "01871ebd-83dd-4a12-9756-26b6738f0d6a",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "vero",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 89.6798,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "repudiandae",
		}
	return res, nil
}
