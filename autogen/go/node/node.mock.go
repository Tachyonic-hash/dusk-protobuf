// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "libero",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 0,
					Timestamp: 714,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 968,
					Type:      4,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 241,
					Type:      5,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 753,
					Type:      2,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 805,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 479,
					Type:      1,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 375,
					Type:      5,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 572,
					Type:      5,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 2,
					Id:   "024aac33-a7af-45b8-a160-f7fa09caf066",
				},
				&Tx{
					Type: 2,
					Id:   "6d0cc992-cdc7-453f-877d-8c5345cb7c64",
				},
				&Tx{
					Type: 5,
					Id:   "ad83e236-18a0-459a-893d-0f8739040b2d",
				},
				&Tx{
					Type: 0,
					Id:   "e0d39364-ad03-4fe7-aa39-f95052352752",
				},
				&Tx{
					Type: 0,
					Id:   "6c830310-748c-47eb-87ec-8fa98f80f240",
				},
				&Tx{
					Type: 3,
					Id:   "57175ebc-6c63-4d8e-b61d-b9738c66ab22",
				},
				&Tx{
					Type: 2,
					Id:   "e6fab35e-6b7c-491a-a7e3-0208af9dc231",
				},
				&Tx{
					Type: 5,
					Id:   "e175c2ff-c3ca-42f6-b8c5-bbe44cf0f537",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "rem",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 729.5557,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "fugit",
		}
	return res, nil
}
