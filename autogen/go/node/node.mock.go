// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "maiores",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "alias",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ratione",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  0,
					Timestamp:  551,
					Type:       3,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  588,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  634,
					Type:       7,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  606,
					Type:       5,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  682,
					Type:       2,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  330,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  361,
					Type:       1,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  455,
					Type:       3,
					Obfuscated: false,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 7,
					Id:   "3b80900e-3a8f-48a1-9331-8286ca196bc8",
				},
				&Tx{
					Type: 6,
					Id:   "f28380e4-b0a2-4c52-8bc6-84d711273fc6",
				},
				&Tx{
					Type: 1,
					Id:   "99e9aa21-df02-4a2e-aff5-dc1ce721aca1",
				},
				&Tx{
					Type: 7,
					Id:   "b69ec555-fb44-4f98-ae8e-f84f844f8a67",
				},
				&Tx{
					Type: 2,
					Id:   "32add7ee-7def-4f6e-801c-38a0bafc5e0e",
				},
				&Tx{
					Type: 3,
					Id:   "96dad038-22bb-4688-8b9a-dcb3ee6768b5",
				},
				&Tx{
					Type: 6,
					Id:   "f52dc9e6-183a-4813-a7a0-8586997c396a",
				},
				&Tx{
					Type: 6,
					Id:   "77868a40-9833-4f82-9aa5-7ef471cafc2a",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "qui",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 672.7543,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quasi",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "officiis",
		}
	return res, nil
}
