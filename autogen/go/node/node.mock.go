// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "sed",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "cupiditate",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptas",
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  0,
					Timestamp:  210,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  54,
					Type:       1,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  18,
					Type:       7,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  137,
					Type:       6,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  938,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  398,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  628,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  660,
					Type:       4,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 2,
					Id:   "a9b3d140-c8c6-4a84-bb72-97e420bd2481",
				},
				&Tx{
					Type: 7,
					Id:   "5ad88297-c8d4-44b5-98c0-218ea87db98a",
				},
				&Tx{
					Type: 2,
					Id:   "513b508d-f9c9-450c-b99c-b6233a6335bf",
				},
				&Tx{
					Type: 3,
					Id:   "370cbb2d-c9dd-42b0-82a5-5ad25ff26e24",
				},
				&Tx{
					Type: 7,
					Id:   "71159051-c964-41c8-8b8c-1486b5ff8755",
				},
				&Tx{
					Type: 0,
					Id:   "fac07765-18f0-4660-9992-7b1c57386b97",
				},
				&Tx{
					Type: 6,
					Id:   "9d652f39-a560-45d5-b886-b05136f0597c",
				},
				&Tx{
					Type: 4,
					Id:   "78df0738-5f67-48f0-bb01-a6f0da52e3e4",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "deleniti",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 523.9629,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "rerum",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quaerat",
		}
	return res, nil
}

type ConfigMock struct{}

func (m *ConfigMock) ChangeLogLevel(ctx context.Context, req *LogLevelRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptatem",
		}
	return res, nil
}
