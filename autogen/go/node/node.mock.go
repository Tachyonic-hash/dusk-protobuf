// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "repellat",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction: 1,
					Timestamp: 475,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 765,
					Type:      3,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 493,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 424,
					Type:      0,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 25,
					Type:      4,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 490,
					Type:      2,
				},
				&TxRecord{
					Direction: 0,
					Timestamp: 462,
					Type:      5,
				},
				&TxRecord{
					Direction: 1,
					Timestamp: 662,
					Type:      2,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 5,
					Id:   "1ec4086b-624b-4f54-9846-5271a5dce115",
				},
				&Tx{
					Type: 4,
					Id:   "287272a9-2f0b-483f-bba7-4510b69c8f5f",
				},
				&Tx{
					Type: 5,
					Id:   "dd18b098-92b3-4f65-bc76-66a4e5df0504",
				},
				&Tx{
					Type: 3,
					Id:   "8067aa98-8f66-449f-97d2-eccc5db25d91",
				},
				&Tx{
					Type: 0,
					Id:   "a8a0ec1b-62a2-482d-8c89-f621566dfb1a",
				},
				&Tx{
					Type: 3,
					Id:   "45bda694-8c87-4cdc-ae36-4ceeec778fca",
				},
				&Tx{
					Type: 3,
					Id:   "f7fa2d8b-d297-44c4-b81c-9017ae92b17a",
				},
				&Tx{
					Type: 2,
					Id:   "6fdd7395-e589-4ef8-b37e-4c824ef42a28",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "nihil",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 152.1690,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type MaintainerMock struct{}

func (m *MaintainerMock) AutomateConsensusTxs(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "officiis",
		}
	return res, nil
}
