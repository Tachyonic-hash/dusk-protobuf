// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletMock struct{}

func (m *WalletMock) Login(ctx context.Context, req *LoginRequest) (*Session, error) {
	res :=
		&Session{}
	return res, nil
}
func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "voluptate",
		}
	return res, nil
}
func (m *WalletMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "autem",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  0,
					Timestamp:  348,
					Type:       1,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  425,
					Type:       5,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  80,
					Type:       5,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  332,
					Type:       4,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  952,
					Type:       0,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  29,
					Type:       1,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  196,
					Type:       2,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  925,
					Type:       7,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 1,
					Id:   "bb9d8abe-c386-4a61-b1b7-259912c3c1cb",
				},
				&Tx{
					Type: 5,
					Id:   "5c56c65b-71d4-43ed-88de-4d7ee83786e6",
				},
				&Tx{
					Type: 6,
					Id:   "d9e3357a-a107-4758-acc0-cc7ba7226a78",
				},
				&Tx{
					Type: 1,
					Id:   "15bf057e-7fa3-43a7-a571-5640007b114c",
				},
				&Tx{
					Type: 3,
					Id:   "16821146-ab09-4f5c-93ed-4565fb837f78",
				},
				&Tx{
					Type: 3,
					Id:   "3bece9b6-d688-4820-bcaf-95f600856f67",
				},
				&Tx{
					Type: 6,
					Id:   "7d423729-6067-4b3a-876c-5de031510ba6",
				},
				&Tx{
					Type: 2,
					Id:   "cfe5f4c4-d9fd-4af8-8eed-ab1bcd1fc393",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "inventore",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 890.2350,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "laudantium",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ipsam",
		}
	return res, nil
}
