// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: rusk.proto

package rusk

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{0}
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{1}
}

// List of transactions to be validated
type ValidateStateTransitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls         []*ContractCallTx `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
	CurrentHeight uint64            `protobuf:"fixed64,2,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
}

func (x *ValidateStateTransitionRequest) Reset() {
	*x = ValidateStateTransitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateStateTransitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateStateTransitionRequest) ProtoMessage() {}

func (x *ValidateStateTransitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateStateTransitionRequest.ProtoReflect.Descriptor instead.
func (*ValidateStateTransitionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateStateTransitionRequest) GetCalls() []*ContractCallTx {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *ValidateStateTransitionRequest) GetCurrentHeight() uint64 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

type ContractCallTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ContractCall:
	//	*ContractCallTx_Tx
	//	*ContractCallTx_Withdraw
	//	*ContractCallTx_Stake
	//	*ContractCallTx_Bid
	//	*ContractCallTx_Slash
	//	*ContractCallTx_Distribute
	//	*ContractCallTx_WithdrawStake
	//	*ContractCallTx_WithdrawBid
	ContractCall isContractCallTx_ContractCall `protobuf_oneof:"contract_call"`
}

func (x *ContractCallTx) Reset() {
	*x = ContractCallTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCallTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCallTx) ProtoMessage() {}

func (x *ContractCallTx) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCallTx.ProtoReflect.Descriptor instead.
func (*ContractCallTx) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{3}
}

func (m *ContractCallTx) GetContractCall() isContractCallTx_ContractCall {
	if m != nil {
		return m.ContractCall
	}
	return nil
}

func (x *ContractCallTx) GetTx() *Transaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_Tx); ok {
		return x.Tx
	}
	return nil
}

func (x *ContractCallTx) GetWithdraw() *WithdrawFeesTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *ContractCallTx) GetStake() *StakeTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_Stake); ok {
		return x.Stake
	}
	return nil
}

func (x *ContractCallTx) GetBid() *BidTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_Bid); ok {
		return x.Bid
	}
	return nil
}

func (x *ContractCallTx) GetSlash() *SlashTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_Slash); ok {
		return x.Slash
	}
	return nil
}

func (x *ContractCallTx) GetDistribute() *DistributeTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_Distribute); ok {
		return x.Distribute
	}
	return nil
}

func (x *ContractCallTx) GetWithdrawStake() *WithdrawStakeTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_WithdrawStake); ok {
		return x.WithdrawStake
	}
	return nil
}

func (x *ContractCallTx) GetWithdrawBid() *WithdrawBidTransaction {
	if x, ok := x.GetContractCall().(*ContractCallTx_WithdrawBid); ok {
		return x.WithdrawBid
	}
	return nil
}

type isContractCallTx_ContractCall interface {
	isContractCallTx_ContractCall()
}

type ContractCallTx_Tx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,proto3,oneof"`
}

type ContractCallTx_Withdraw struct {
	Withdraw *WithdrawFeesTransaction `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ContractCallTx_Stake struct {
	Stake *StakeTransaction `protobuf:"bytes,3,opt,name=stake,proto3,oneof"`
}

type ContractCallTx_Bid struct {
	Bid *BidTransaction `protobuf:"bytes,4,opt,name=bid,proto3,oneof"`
}

type ContractCallTx_Slash struct {
	Slash *SlashTransaction `protobuf:"bytes,5,opt,name=slash,proto3,oneof"`
}

type ContractCallTx_Distribute struct {
	Distribute *DistributeTransaction `protobuf:"bytes,6,opt,name=distribute,proto3,oneof"`
}

type ContractCallTx_WithdrawStake struct {
	WithdrawStake *WithdrawStakeTransaction `protobuf:"bytes,7,opt,name=withdraw_stake,json=withdrawStake,proto3,oneof"`
}

type ContractCallTx_WithdrawBid struct {
	WithdrawBid *WithdrawBidTransaction `protobuf:"bytes,8,opt,name=withdraw_bid,json=withdrawBid,proto3,oneof"`
}

func (*ContractCallTx_Tx) isContractCallTx_ContractCall() {}

func (*ContractCallTx_Withdraw) isContractCallTx_ContractCall() {}

func (*ContractCallTx_Stake) isContractCallTx_ContractCall() {}

func (*ContractCallTx_Bid) isContractCallTx_ContractCall() {}

func (*ContractCallTx_Slash) isContractCallTx_ContractCall() {}

func (*ContractCallTx_Distribute) isContractCallTx_ContractCall() {}

func (*ContractCallTx_WithdrawStake) isContractCallTx_ContractCall() {}

func (*ContractCallTx_WithdrawBid) isContractCallTx_ContractCall() {}

// Used to request the Slash of a stake
type SlashTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: specify eventual other fields
	Tx *NewTransactionRequest `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *SlashTransactionRequest) Reset() {
	*x = SlashTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashTransactionRequest) ProtoMessage() {}

func (x *SlashTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashTransactionRequest.ProtoReflect.Descriptor instead.
func (*SlashTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{4}
}

func (x *SlashTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Used to request the withdrawal of fees from a Provisioner
type DistributeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: specify eventual other fields
	Tx *NewTransactionRequest `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *DistributeTransactionRequest) Reset() {
	*x = DistributeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeTransactionRequest) ProtoMessage() {}

func (x *DistributeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeTransactionRequest.ProtoReflect.Descriptor instead.
func (*DistributeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{5}
}

func (x *DistributeTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Used to request the withdrawal of fees from a Provisioner
type WithdrawFeesTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: specify eventual other fields
	Tx *NewTransactionRequest `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *WithdrawFeesTransactionRequest) Reset() {
	*x = WithdrawFeesTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFeesTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFeesTransactionRequest) ProtoMessage() {}

func (x *WithdrawFeesTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFeesTransactionRequest.ProtoReflect.Descriptor instead.
func (*WithdrawFeesTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{6}
}

func (x *WithdrawFeesTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Used to request the withdrawal of a Stake
type WithdrawStakeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: specify eventual other fields
	Tx *NewTransactionRequest `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *WithdrawStakeTransactionRequest) Reset() {
	*x = WithdrawStakeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawStakeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawStakeTransactionRequest) ProtoMessage() {}

func (x *WithdrawStakeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawStakeTransactionRequest.ProtoReflect.Descriptor instead.
func (*WithdrawStakeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{7}
}

func (x *WithdrawStakeTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Used to request the withdrawal of a Bid
type WithdrawBidTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: specify eventual other fields
	Tx *NewTransactionRequest `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *WithdrawBidTransactionRequest) Reset() {
	*x = WithdrawBidTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawBidTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawBidTransactionRequest) ProtoMessage() {}

func (x *WithdrawBidTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawBidTransactionRequest.ProtoReflect.Descriptor instead.
func (*WithdrawBidTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{8}
}

func (x *WithdrawBidTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Used to request the creation of a Stake
type StakeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlsKey []byte                 `protobuf:"bytes,1,opt,name=bls_key,json=blsKey,proto3" json:"bls_key,omitempty"`
	Tx     *NewTransactionRequest `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *StakeTransactionRequest) Reset() {
	*x = StakeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeTransactionRequest) ProtoMessage() {}

func (x *StakeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeTransactionRequest.ProtoReflect.Descriptor instead.
func (*StakeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{9}
}

func (x *StakeTransactionRequest) GetBlsKey() []byte {
	if x != nil {
		return x.BlsKey
	}
	return nil
}

func (x *StakeTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Used to Request the creation of a Bid
type BidTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M                []byte                 `protobuf:"bytes,1,opt,name=M,proto3" json:"M,omitempty"`
	Pk               []byte                 `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Seed             []byte                 `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
	ExpirationHeight uint64                 `protobuf:"fixed64,4,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	Tx               *NewTransactionRequest `protobuf:"bytes,5,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *BidTransactionRequest) Reset() {
	*x = BidTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidTransactionRequest) ProtoMessage() {}

func (x *BidTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidTransactionRequest.ProtoReflect.Descriptor instead.
func (*BidTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{10}
}

func (x *BidTransactionRequest) GetM() []byte {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *BidTransactionRequest) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *BidTransactionRequest) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *BidTransactionRequest) GetExpirationHeight() uint64 {
	if x != nil {
		return x.ExpirationHeight
	}
	return 0
}

func (x *BidTransactionRequest) GetTx() *NewTransactionRequest {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ValidateStateTransitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessfulCalls []*ContractCallTx `protobuf:"bytes,1,rep,name=successful_calls,json=successfulCalls,proto3" json:"successful_calls,omitempty"`
}

func (x *ValidateStateTransitionResponse) Reset() {
	*x = ValidateStateTransitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateStateTransitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateStateTransitionResponse) ProtoMessage() {}

func (x *ValidateStateTransitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateStateTransitionResponse.ProtoReflect.Descriptor instead.
func (*ValidateStateTransitionResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateStateTransitionResponse) GetSuccessfulCalls() []*ContractCallTx {
	if x != nil {
		return x.SuccessfulCalls
	}
	return nil
}

type ExecuteStateTransitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*ContractCallTx `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *ExecuteStateTransitionRequest) Reset() {
	*x = ExecuteStateTransitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStateTransitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStateTransitionRequest) ProtoMessage() {}

func (x *ExecuteStateTransitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStateTransitionRequest.ProtoReflect.Descriptor instead.
func (*ExecuteStateTransitionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{12}
}

func (x *ExecuteStateTransitionRequest) GetCalls() []*ContractCallTx {
	if x != nil {
		return x.Calls
	}
	return nil
}

type ExecuteStateTransitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CurrentHeight uint64 `protobuf:"fixed64,2,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
}

func (x *ExecuteStateTransitionResponse) Reset() {
	*x = ExecuteStateTransitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStateTransitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStateTransitionResponse) ProtoMessage() {}

func (x *ExecuteStateTransitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStateTransitionResponse.ProtoReflect.Descriptor instead.
func (*ExecuteStateTransitionResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{13}
}

func (x *ExecuteStateTransitionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecuteStateTransitionResponse) GetCurrentHeight() uint64 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

type GenerateSecretKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B []byte `protobuf:"bytes,1,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *GenerateSecretKeyRequest) Reset() {
	*x = GenerateSecretKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSecretKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSecretKeyRequest) ProtoMessage() {}

func (x *GenerateSecretKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSecretKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateSecretKeyRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateSecretKeyRequest) GetB() []byte {
	if x != nil {
		return x.B
	}
	return nil
}

// Used for scanning unspent input set
type OwnedNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*DecryptedNote `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *OwnedNotesResponse) Reset() {
	*x = OwnedNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnedNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedNotesResponse) ProtoMessage() {}

func (x *OwnedNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedNotesResponse.ProtoReflect.Descriptor instead.
func (*OwnedNotesResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{15}
}

func (x *OwnedNotesResponse) GetNotes() []*DecryptedNote {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Call from CLI directly
type NewTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sk         *SecretKey `protobuf:"bytes,1,opt,name=sk,proto3" json:"sk,omitempty"`
	Recipient  *PublicKey `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Value      uint64     `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Fee        uint64     `protobuf:"fixed64,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Obfuscated bool       `protobuf:"varint,5,opt,name=obfuscated,proto3" json:"obfuscated,omitempty"`
}

func (x *NewTransactionRequest) Reset() {
	*x = NewTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTransactionRequest) ProtoMessage() {}

func (x *NewTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTransactionRequest.ProtoReflect.Descriptor instead.
func (*NewTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{16}
}

func (x *NewTransactionRequest) GetSk() *SecretKey {
	if x != nil {
		return x.Sk
	}
	return nil
}

func (x *NewTransactionRequest) GetRecipient() *PublicKey {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *NewTransactionRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *NewTransactionRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *NewTransactionRequest) GetObfuscated() bool {
	if x != nil {
		return x.Obfuscated
	}
	return false
}

type VerifyTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *VerifyTransactionResponse) Reset() {
	*x = VerifyTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTransactionResponse) ProtoMessage() {}

func (x *VerifyTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTransactionResponse.ProtoReflect.Descriptor instead.
func (*VerifyTransactionResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{17}
}

func (x *VerifyTransactionResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type KeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vk *ViewKey   `protobuf:"bytes,1,opt,name=vk,proto3" json:"vk,omitempty"`
	Pk *PublicKey `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *KeysResponse) Reset() {
	*x = KeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysResponse) ProtoMessage() {}

func (x *KeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysResponse.ProtoReflect.Descriptor instead.
func (*KeysResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{18}
}

func (x *KeysResponse) GetVk() *ViewKey {
	if x != nil {
		return x.Vk
	}
	return nil
}

func (x *KeysResponse) GetPk() *PublicKey {
	if x != nil {
		return x.Pk
	}
	return nil
}

type GenerateScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D      []byte `protobuf:"bytes,1,opt,name=d,proto3" json:"d,omitempty"`
	K      []byte `protobuf:"bytes,2,opt,name=k,proto3" json:"k,omitempty"`
	Y      []byte `protobuf:"bytes,3,opt,name=y,proto3" json:"y,omitempty"`
	YInv   []byte `protobuf:"bytes,4,opt,name=y_inv,json=yInv,proto3" json:"y_inv,omitempty"`
	Q      []byte `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	Z      []byte `protobuf:"bytes,6,opt,name=z,proto3" json:"z,omitempty"`
	Seed   []byte `protobuf:"bytes,7,opt,name=seed,proto3" json:"seed,omitempty"`
	Bids   []byte `protobuf:"bytes,8,opt,name=bids,proto3" json:"bids,omitempty"`
	BidPos uint64 `protobuf:"fixed64,9,opt,name=bid_pos,json=bidPos,proto3" json:"bid_pos,omitempty"`
}

func (x *GenerateScoreRequest) Reset() {
	*x = GenerateScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateScoreRequest) ProtoMessage() {}

func (x *GenerateScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateScoreRequest.ProtoReflect.Descriptor instead.
func (*GenerateScoreRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{19}
}

func (x *GenerateScoreRequest) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *GenerateScoreRequest) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *GenerateScoreRequest) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *GenerateScoreRequest) GetYInv() []byte {
	if x != nil {
		return x.YInv
	}
	return nil
}

func (x *GenerateScoreRequest) GetQ() []byte {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *GenerateScoreRequest) GetZ() []byte {
	if x != nil {
		return x.Z
	}
	return nil
}

func (x *GenerateScoreRequest) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *GenerateScoreRequest) GetBids() []byte {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *GenerateScoreRequest) GetBidPos() uint64 {
	if x != nil {
		return x.BidPos
	}
	return 0
}

type GenerateScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Score []byte `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Z     []byte `protobuf:"bytes,3,opt,name=z,proto3" json:"z,omitempty"`
	Bids  []byte `protobuf:"bytes,4,opt,name=bids,proto3" json:"bids,omitempty"`
}

func (x *GenerateScoreResponse) Reset() {
	*x = GenerateScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateScoreResponse) ProtoMessage() {}

func (x *GenerateScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateScoreResponse.ProtoReflect.Descriptor instead.
func (*GenerateScoreResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{20}
}

func (x *GenerateScoreResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *GenerateScoreResponse) GetScore() []byte {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *GenerateScoreResponse) GetZ() []byte {
	if x != nil {
		return x.Z
	}
	return nil
}

func (x *GenerateScoreResponse) GetBids() []byte {
	if x != nil {
		return x.Bids
	}
	return nil
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vk *ViewKey `protobuf:"bytes,1,opt,name=vk,proto3" json:"vk,omitempty"`
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{21}
}

func (x *GetBalanceRequest) GetVk() *ViewKey {
	if x != nil {
		return x.Vk
	}
	return nil
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance uint64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{22}
}

func (x *GetBalanceResponse) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type BinaryHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs [][]byte `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *BinaryHashRequest) Reset() {
	*x = BinaryHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryHashRequest) ProtoMessage() {}

func (x *BinaryHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryHashRequest.ProtoReflect.Descriptor instead.
func (*BinaryHashRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{23}
}

func (x *BinaryHashRequest) GetInputs() [][]byte {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type TransactionHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *TransactionHashRequest) Reset() {
	*x = TransactionHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHashRequest) ProtoMessage() {}

func (x *TransactionHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHashRequest.ProtoReflect.Descriptor instead.
func (*TransactionHashRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{24}
}

func (x *TransactionHashRequest) GetTxs() []*Transaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

// HashRequest carries the input for the hashing which can be an array of arrays of bytes or a transaction.
type HashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*HashRequest_BinInputs
	//	*HashRequest_TxInputs
	Request isHashRequest_Request `protobuf_oneof:"request"`
}

func (x *HashRequest) Reset() {
	*x = HashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRequest) ProtoMessage() {}

func (x *HashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRequest.ProtoReflect.Descriptor instead.
func (*HashRequest) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{25}
}

func (m *HashRequest) GetRequest() isHashRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *HashRequest) GetBinInputs() *BinaryHashRequest {
	if x, ok := x.GetRequest().(*HashRequest_BinInputs); ok {
		return x.BinInputs
	}
	return nil
}

func (x *HashRequest) GetTxInputs() *TransactionHashRequest {
	if x, ok := x.GetRequest().(*HashRequest_TxInputs); ok {
		return x.TxInputs
	}
	return nil
}

type isHashRequest_Request interface {
	isHashRequest_Request()
}

type HashRequest_BinInputs struct {
	BinInputs *BinaryHashRequest `protobuf:"bytes,1,opt,name=bin_inputs,json=binInputs,proto3,oneof"`
}

type HashRequest_TxInputs struct {
	TxInputs *TransactionHashRequest `protobuf:"bytes,2,opt,name=tx_inputs,json=txInputs,proto3,oneof"`
}

func (*HashRequest_BinInputs) isHashRequest_Request() {}

func (*HashRequest_TxInputs) isHashRequest_Request() {}

// HashResponse carries the scalar calculated by the hashing function
type HashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *Scalar `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *HashResponse) Reset() {
	*x = HashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rusk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashResponse) ProtoMessage() {}

func (x *HashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rusk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashResponse.ProtoReflect.Descriptor instead.
func (*HashResponse) Descriptor() ([]byte, []int) {
	return file_rusk_proto_rawDescGZIP(), []int{26}
}

func (x *HashResponse) GetHash() *Scalar {
	if x != nil {
		return x.Hash
	}
	return nil
}

var File_rusk_proto protoreflect.FileDescriptor

var file_rusk_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x75,
	0x73, 0x6b, 0x1a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6e, 0x6f, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x1e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x78, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xd8, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x78, 0x12, 0x23, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x12, 0x3b, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x3d,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x69, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x46, 0x0a, 0x17, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02,
	0x74, 0x78, 0x22, 0x4b, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x74, 0x78, 0x22,
	0x4d, 0x0a, 0x1e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x74, 0x78, 0x22, 0x4e,
	0x0a, 0x1f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x74, 0x78, 0x22, 0x4c,
	0x0a, 0x1d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x74, 0x78, 0x22, 0x5f, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x6c, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x74, 0x78, 0x22, 0xa3, 0x01,
	0x0a, 0x15, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x02, 0x74, 0x78, 0x22, 0x62, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x05, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x22, 0x61, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x28, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x62, 0x22, 0x3f, 0x0a, 0x12, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x73, 0x6b, 0x12, 0x2d, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x4e, 0x0a,
	0x0c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x02, 0x76, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x76, 0x6b, 0x12, 0x1f, 0x0a, 0x02,
	0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x70, 0x6b, 0x22, 0xb2, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x79,
	0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x79, 0x49, 0x6e, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x7a, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x62, 0x69, 0x64, 0x50,
	0x6f, 0x73, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x7a, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x02, 0x76, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x75, 0x73,
	0x6b, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x76, 0x6b, 0x22, 0x2e, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2b, 0x0a,
	0x11, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x69, 0x6e,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x0c, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x32, 0xd6, 0x0a,
	0x0a, 0x04, 0x52, 0x75, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x11,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x04,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x12, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x0d, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79,
	0x1a, 0x18, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e,
	0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x78, 0x1a, 0x1f,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x06, 0x4e, 0x65, 0x77, 0x42, 0x69, 0x64, 0x12, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42,
	0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e,
	0x4e, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x69, 0x64, 0x12, 0x23,
	0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x72, 0x75, 0x73,
	0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0x39, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x12, 0x2f, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x75, 0x73, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x75, 0x73, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rusk_proto_rawDescOnce sync.Once
	file_rusk_proto_rawDescData = file_rusk_proto_rawDesc
)

func file_rusk_proto_rawDescGZIP() []byte {
	file_rusk_proto_rawDescOnce.Do(func() {
		file_rusk_proto_rawDescData = protoimpl.X.CompressGZIP(file_rusk_proto_rawDescData)
	})
	return file_rusk_proto_rawDescData
}

var file_rusk_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_rusk_proto_goTypes = []interface{}{
	(*EchoRequest)(nil),                     // 0: rusk.EchoRequest
	(*EchoResponse)(nil),                    // 1: rusk.EchoResponse
	(*ValidateStateTransitionRequest)(nil),  // 2: rusk.ValidateStateTransitionRequest
	(*ContractCallTx)(nil),                  // 3: rusk.ContractCallTx
	(*SlashTransactionRequest)(nil),         // 4: rusk.SlashTransactionRequest
	(*DistributeTransactionRequest)(nil),    // 5: rusk.DistributeTransactionRequest
	(*WithdrawFeesTransactionRequest)(nil),  // 6: rusk.WithdrawFeesTransactionRequest
	(*WithdrawStakeTransactionRequest)(nil), // 7: rusk.WithdrawStakeTransactionRequest
	(*WithdrawBidTransactionRequest)(nil),   // 8: rusk.WithdrawBidTransactionRequest
	(*StakeTransactionRequest)(nil),         // 9: rusk.StakeTransactionRequest
	(*BidTransactionRequest)(nil),           // 10: rusk.BidTransactionRequest
	(*ValidateStateTransitionResponse)(nil), // 11: rusk.ValidateStateTransitionResponse
	(*ExecuteStateTransitionRequest)(nil),   // 12: rusk.ExecuteStateTransitionRequest
	(*ExecuteStateTransitionResponse)(nil),  // 13: rusk.ExecuteStateTransitionResponse
	(*GenerateSecretKeyRequest)(nil),        // 14: rusk.GenerateSecretKeyRequest
	(*OwnedNotesResponse)(nil),              // 15: rusk.OwnedNotesResponse
	(*NewTransactionRequest)(nil),           // 16: rusk.NewTransactionRequest
	(*VerifyTransactionResponse)(nil),       // 17: rusk.VerifyTransactionResponse
	(*KeysResponse)(nil),                    // 18: rusk.KeysResponse
	(*GenerateScoreRequest)(nil),            // 19: rusk.GenerateScoreRequest
	(*GenerateScoreResponse)(nil),           // 20: rusk.GenerateScoreResponse
	(*GetBalanceRequest)(nil),               // 21: rusk.GetBalanceRequest
	(*GetBalanceResponse)(nil),              // 22: rusk.GetBalanceResponse
	(*BinaryHashRequest)(nil),               // 23: rusk.BinaryHashRequest
	(*TransactionHashRequest)(nil),          // 24: rusk.TransactionHashRequest
	(*HashRequest)(nil),                     // 25: rusk.HashRequest
	(*HashResponse)(nil),                    // 26: rusk.HashResponse
	(*Transaction)(nil),                     // 27: rusk.Transaction
	(*WithdrawFeesTransaction)(nil),         // 28: rusk.WithdrawFeesTransaction
	(*StakeTransaction)(nil),                // 29: rusk.StakeTransaction
	(*BidTransaction)(nil),                  // 30: rusk.BidTransaction
	(*SlashTransaction)(nil),                // 31: rusk.SlashTransaction
	(*DistributeTransaction)(nil),           // 32: rusk.DistributeTransaction
	(*WithdrawStakeTransaction)(nil),        // 33: rusk.WithdrawStakeTransaction
	(*WithdrawBidTransaction)(nil),          // 34: rusk.WithdrawBidTransaction
	(*DecryptedNote)(nil),                   // 35: rusk.DecryptedNote
	(*SecretKey)(nil),                       // 36: rusk.SecretKey
	(*PublicKey)(nil),                       // 37: rusk.PublicKey
	(*ViewKey)(nil),                         // 38: rusk.ViewKey
	(*Scalar)(nil),                          // 39: rusk.Scalar
}
var file_rusk_proto_depIdxs = []int32{
	3,  // 0: rusk.ValidateStateTransitionRequest.calls:type_name -> rusk.ContractCallTx
	27, // 1: rusk.ContractCallTx.tx:type_name -> rusk.Transaction
	28, // 2: rusk.ContractCallTx.withdraw:type_name -> rusk.WithdrawFeesTransaction
	29, // 3: rusk.ContractCallTx.stake:type_name -> rusk.StakeTransaction
	30, // 4: rusk.ContractCallTx.bid:type_name -> rusk.BidTransaction
	31, // 5: rusk.ContractCallTx.slash:type_name -> rusk.SlashTransaction
	32, // 6: rusk.ContractCallTx.distribute:type_name -> rusk.DistributeTransaction
	33, // 7: rusk.ContractCallTx.withdraw_stake:type_name -> rusk.WithdrawStakeTransaction
	34, // 8: rusk.ContractCallTx.withdraw_bid:type_name -> rusk.WithdrawBidTransaction
	16, // 9: rusk.SlashTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	16, // 10: rusk.DistributeTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	16, // 11: rusk.WithdrawFeesTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	16, // 12: rusk.WithdrawStakeTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	16, // 13: rusk.WithdrawBidTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	16, // 14: rusk.StakeTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	16, // 15: rusk.BidTransactionRequest.tx:type_name -> rusk.NewTransactionRequest
	3,  // 16: rusk.ValidateStateTransitionResponse.successful_calls:type_name -> rusk.ContractCallTx
	3,  // 17: rusk.ExecuteStateTransitionRequest.calls:type_name -> rusk.ContractCallTx
	35, // 18: rusk.OwnedNotesResponse.notes:type_name -> rusk.DecryptedNote
	36, // 19: rusk.NewTransactionRequest.sk:type_name -> rusk.SecretKey
	37, // 20: rusk.NewTransactionRequest.recipient:type_name -> rusk.PublicKey
	38, // 21: rusk.KeysResponse.vk:type_name -> rusk.ViewKey
	37, // 22: rusk.KeysResponse.pk:type_name -> rusk.PublicKey
	38, // 23: rusk.GetBalanceRequest.vk:type_name -> rusk.ViewKey
	27, // 24: rusk.TransactionHashRequest.txs:type_name -> rusk.Transaction
	23, // 25: rusk.HashRequest.bin_inputs:type_name -> rusk.BinaryHashRequest
	24, // 26: rusk.HashRequest.tx_inputs:type_name -> rusk.TransactionHashRequest
	39, // 27: rusk.HashResponse.hash:type_name -> rusk.Scalar
	0,  // 28: rusk.Rusk.Echo:input_type -> rusk.EchoRequest
	2,  // 29: rusk.Rusk.ValidateStateTransition:input_type -> rusk.ValidateStateTransitionRequest
	12, // 30: rusk.Rusk.ExecuteStateTransition:input_type -> rusk.ExecuteStateTransitionRequest
	19, // 31: rusk.Rusk.GenerateScore:input_type -> rusk.GenerateScoreRequest
	14, // 32: rusk.Rusk.GenerateSecretKey:input_type -> rusk.GenerateSecretKeyRequest
	36, // 33: rusk.Rusk.Keys:input_type -> rusk.SecretKey
	38, // 34: rusk.Rusk.FullScanOwnedNotes:input_type -> rusk.ViewKey
	16, // 35: rusk.Rusk.NewTransaction:input_type -> rusk.NewTransactionRequest
	21, // 36: rusk.Rusk.GetBalance:input_type -> rusk.GetBalanceRequest
	3,  // 37: rusk.Rusk.VerifyTransaction:input_type -> rusk.ContractCallTx
	9,  // 38: rusk.Rusk.NewStake:input_type -> rusk.StakeTransactionRequest
	29, // 39: rusk.Rusk.VerifyStake:input_type -> rusk.StakeTransaction
	7,  // 40: rusk.Rusk.NewWithdrawStake:input_type -> rusk.WithdrawStakeTransactionRequest
	10, // 41: rusk.Rusk.NewBid:input_type -> rusk.BidTransactionRequest
	8,  // 42: rusk.Rusk.NewWithdrawBid:input_type -> rusk.WithdrawBidTransactionRequest
	5,  // 43: rusk.Rusk.NewDistribute:input_type -> rusk.DistributeTransactionRequest
	6,  // 44: rusk.Rusk.NewWithdrawFees:input_type -> rusk.WithdrawFeesTransactionRequest
	4,  // 45: rusk.Rusk.NewSlash:input_type -> rusk.SlashTransactionRequest
	25, // 46: rusk.Crypto.Hash:input_type -> rusk.HashRequest
	1,  // 47: rusk.Rusk.Echo:output_type -> rusk.EchoResponse
	11, // 48: rusk.Rusk.ValidateStateTransition:output_type -> rusk.ValidateStateTransitionResponse
	13, // 49: rusk.Rusk.ExecuteStateTransition:output_type -> rusk.ExecuteStateTransitionResponse
	20, // 50: rusk.Rusk.GenerateScore:output_type -> rusk.GenerateScoreResponse
	36, // 51: rusk.Rusk.GenerateSecretKey:output_type -> rusk.SecretKey
	18, // 52: rusk.Rusk.Keys:output_type -> rusk.KeysResponse
	15, // 53: rusk.Rusk.FullScanOwnedNotes:output_type -> rusk.OwnedNotesResponse
	27, // 54: rusk.Rusk.NewTransaction:output_type -> rusk.Transaction
	22, // 55: rusk.Rusk.GetBalance:output_type -> rusk.GetBalanceResponse
	17, // 56: rusk.Rusk.VerifyTransaction:output_type -> rusk.VerifyTransactionResponse
	29, // 57: rusk.Rusk.NewStake:output_type -> rusk.StakeTransaction
	17, // 58: rusk.Rusk.VerifyStake:output_type -> rusk.VerifyTransactionResponse
	33, // 59: rusk.Rusk.NewWithdrawStake:output_type -> rusk.WithdrawStakeTransaction
	30, // 60: rusk.Rusk.NewBid:output_type -> rusk.BidTransaction
	34, // 61: rusk.Rusk.NewWithdrawBid:output_type -> rusk.WithdrawBidTransaction
	32, // 62: rusk.Rusk.NewDistribute:output_type -> rusk.DistributeTransaction
	28, // 63: rusk.Rusk.NewWithdrawFees:output_type -> rusk.WithdrawFeesTransaction
	31, // 64: rusk.Rusk.NewSlash:output_type -> rusk.SlashTransaction
	26, // 65: rusk.Crypto.Hash:output_type -> rusk.HashResponse
	47, // [47:66] is the sub-list for method output_type
	28, // [28:47] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_rusk_proto_init() }
func file_rusk_proto_init() {
	if File_rusk_proto != nil {
		return
	}
	file_field_proto_init()
	file_keys_proto_init()
	file_note_proto_init()
	file_transaction_proto_init()
	file_consensus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rusk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateStateTransitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCallTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlashTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFeesTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawStakeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawBidTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateStateTransitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStateTransitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStateTransitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSecretKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnedNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rusk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rusk_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ContractCallTx_Tx)(nil),
		(*ContractCallTx_Withdraw)(nil),
		(*ContractCallTx_Stake)(nil),
		(*ContractCallTx_Bid)(nil),
		(*ContractCallTx_Slash)(nil),
		(*ContractCallTx_Distribute)(nil),
		(*ContractCallTx_WithdrawStake)(nil),
		(*ContractCallTx_WithdrawBid)(nil),
	}
	file_rusk_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*HashRequest_BinInputs)(nil),
		(*HashRequest_TxInputs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rusk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rusk_proto_goTypes,
		DependencyIndexes: file_rusk_proto_depIdxs,
		MessageInfos:      file_rusk_proto_msgTypes,
	}.Build()
	File_rusk_proto = out.File
	file_rusk_proto_rawDesc = nil
	file_rusk_proto_goTypes = nil
	file_rusk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RuskClient is the client API for Rusk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuskClient interface {
	// Simple echo request
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Validate a set of contract calls, returning false if at least one of the
	// listed transactions is inconsistent
	ValidateStateTransition(ctx context.Context, in *ValidateStateTransitionRequest, opts ...grpc.CallOption) (*ValidateStateTransitionResponse, error)
	// Execute a set of contract calls, resulting in a mutation of the contract
	// storage.
	ExecuteStateTransition(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error)
	// Generate a proof of blind bid, and a score.
	GenerateScore(ctx context.Context, in *GenerateScoreRequest, opts ...grpc.CallOption) (*GenerateScoreResponse, error)
	// Phoenix stuff
	GenerateSecretKey(ctx context.Context, in *GenerateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKey, error)
	Keys(ctx context.Context, in *SecretKey, opts ...grpc.CallOption) (*KeysResponse, error)
	FullScanOwnedNotes(ctx context.Context, in *ViewKey, opts ...grpc.CallOption) (*OwnedNotesResponse, error)
	NewTransaction(ctx context.Context, in *NewTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	VerifyTransaction(ctx context.Context, in *ContractCallTx, opts ...grpc.CallOption) (*VerifyTransactionResponse, error)
	// Stake
	NewStake(ctx context.Context, in *StakeTransactionRequest, opts ...grpc.CallOption) (*StakeTransaction, error)
	VerifyStake(ctx context.Context, in *StakeTransaction, opts ...grpc.CallOption) (*VerifyTransactionResponse, error)
	NewWithdrawStake(ctx context.Context, in *WithdrawStakeTransactionRequest, opts ...grpc.CallOption) (*WithdrawStakeTransaction, error)
	// Bid
	NewBid(ctx context.Context, in *BidTransactionRequest, opts ...grpc.CallOption) (*BidTransaction, error)
	NewWithdrawBid(ctx context.Context, in *WithdrawBidTransactionRequest, opts ...grpc.CallOption) (*WithdrawBidTransaction, error)
	// Distribute
	NewDistribute(ctx context.Context, in *DistributeTransactionRequest, opts ...grpc.CallOption) (*DistributeTransaction, error)
	// WithdrawFee
	NewWithdrawFees(ctx context.Context, in *WithdrawFeesTransactionRequest, opts ...grpc.CallOption) (*WithdrawFeesTransaction, error)
	// Slash
	NewSlash(ctx context.Context, in *SlashTransactionRequest, opts ...grpc.CallOption) (*SlashTransaction, error)
}

type ruskClient struct {
	cc grpc.ClientConnInterface
}

func NewRuskClient(cc grpc.ClientConnInterface) RuskClient {
	return &ruskClient{cc}
}

func (c *ruskClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) ValidateStateTransition(ctx context.Context, in *ValidateStateTransitionRequest, opts ...grpc.CallOption) (*ValidateStateTransitionResponse, error) {
	out := new(ValidateStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/ValidateStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) ExecuteStateTransition(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error) {
	out := new(ExecuteStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/ExecuteStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) GenerateScore(ctx context.Context, in *GenerateScoreRequest, opts ...grpc.CallOption) (*GenerateScoreResponse, error) {
	out := new(GenerateScoreResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/GenerateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) GenerateSecretKey(ctx context.Context, in *GenerateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKey, error) {
	out := new(SecretKey)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/GenerateSecretKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) Keys(ctx context.Context, in *SecretKey, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/Keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) FullScanOwnedNotes(ctx context.Context, in *ViewKey, opts ...grpc.CallOption) (*OwnedNotesResponse, error) {
	out := new(OwnedNotesResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/FullScanOwnedNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewTransaction(ctx context.Context, in *NewTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) VerifyTransaction(ctx context.Context, in *ContractCallTx, opts ...grpc.CallOption) (*VerifyTransactionResponse, error) {
	out := new(VerifyTransactionResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/VerifyTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewStake(ctx context.Context, in *StakeTransactionRequest, opts ...grpc.CallOption) (*StakeTransaction, error) {
	out := new(StakeTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) VerifyStake(ctx context.Context, in *StakeTransaction, opts ...grpc.CallOption) (*VerifyTransactionResponse, error) {
	out := new(VerifyTransactionResponse)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/VerifyStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewWithdrawStake(ctx context.Context, in *WithdrawStakeTransactionRequest, opts ...grpc.CallOption) (*WithdrawStakeTransaction, error) {
	out := new(WithdrawStakeTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewWithdrawStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewBid(ctx context.Context, in *BidTransactionRequest, opts ...grpc.CallOption) (*BidTransaction, error) {
	out := new(BidTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewWithdrawBid(ctx context.Context, in *WithdrawBidTransactionRequest, opts ...grpc.CallOption) (*WithdrawBidTransaction, error) {
	out := new(WithdrawBidTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewWithdrawBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewDistribute(ctx context.Context, in *DistributeTransactionRequest, opts ...grpc.CallOption) (*DistributeTransaction, error) {
	out := new(DistributeTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewWithdrawFees(ctx context.Context, in *WithdrawFeesTransactionRequest, opts ...grpc.CallOption) (*WithdrawFeesTransaction, error) {
	out := new(WithdrawFeesTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewWithdrawFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruskClient) NewSlash(ctx context.Context, in *SlashTransactionRequest, opts ...grpc.CallOption) (*SlashTransaction, error) {
	out := new(SlashTransaction)
	err := c.cc.Invoke(ctx, "/rusk.Rusk/NewSlash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuskServer is the server API for Rusk service.
type RuskServer interface {
	// Simple echo request
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Validate a set of contract calls, returning false if at least one of the
	// listed transactions is inconsistent
	ValidateStateTransition(context.Context, *ValidateStateTransitionRequest) (*ValidateStateTransitionResponse, error)
	// Execute a set of contract calls, resulting in a mutation of the contract
	// storage.
	ExecuteStateTransition(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error)
	// Generate a proof of blind bid, and a score.
	GenerateScore(context.Context, *GenerateScoreRequest) (*GenerateScoreResponse, error)
	// Phoenix stuff
	GenerateSecretKey(context.Context, *GenerateSecretKeyRequest) (*SecretKey, error)
	Keys(context.Context, *SecretKey) (*KeysResponse, error)
	FullScanOwnedNotes(context.Context, *ViewKey) (*OwnedNotesResponse, error)
	NewTransaction(context.Context, *NewTransactionRequest) (*Transaction, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	VerifyTransaction(context.Context, *ContractCallTx) (*VerifyTransactionResponse, error)
	// Stake
	NewStake(context.Context, *StakeTransactionRequest) (*StakeTransaction, error)
	VerifyStake(context.Context, *StakeTransaction) (*VerifyTransactionResponse, error)
	NewWithdrawStake(context.Context, *WithdrawStakeTransactionRequest) (*WithdrawStakeTransaction, error)
	// Bid
	NewBid(context.Context, *BidTransactionRequest) (*BidTransaction, error)
	NewWithdrawBid(context.Context, *WithdrawBidTransactionRequest) (*WithdrawBidTransaction, error)
	// Distribute
	NewDistribute(context.Context, *DistributeTransactionRequest) (*DistributeTransaction, error)
	// WithdrawFee
	NewWithdrawFees(context.Context, *WithdrawFeesTransactionRequest) (*WithdrawFeesTransaction, error)
	// Slash
	NewSlash(context.Context, *SlashTransactionRequest) (*SlashTransaction, error)
}

// UnimplementedRuskServer can be embedded to have forward compatible implementations.
type UnimplementedRuskServer struct {
}

func (*UnimplementedRuskServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedRuskServer) ValidateStateTransition(context.Context, *ValidateStateTransitionRequest) (*ValidateStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateStateTransition not implemented")
}
func (*UnimplementedRuskServer) ExecuteStateTransition(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStateTransition not implemented")
}
func (*UnimplementedRuskServer) GenerateScore(context.Context, *GenerateScoreRequest) (*GenerateScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateScore not implemented")
}
func (*UnimplementedRuskServer) GenerateSecretKey(context.Context, *GenerateSecretKeyRequest) (*SecretKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSecretKey not implemented")
}
func (*UnimplementedRuskServer) Keys(context.Context, *SecretKey) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (*UnimplementedRuskServer) FullScanOwnedNotes(context.Context, *ViewKey) (*OwnedNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullScanOwnedNotes not implemented")
}
func (*UnimplementedRuskServer) NewTransaction(context.Context, *NewTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTransaction not implemented")
}
func (*UnimplementedRuskServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedRuskServer) VerifyTransaction(context.Context, *ContractCallTx) (*VerifyTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTransaction not implemented")
}
func (*UnimplementedRuskServer) NewStake(context.Context, *StakeTransactionRequest) (*StakeTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStake not implemented")
}
func (*UnimplementedRuskServer) VerifyStake(context.Context, *StakeTransaction) (*VerifyTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStake not implemented")
}
func (*UnimplementedRuskServer) NewWithdrawStake(context.Context, *WithdrawStakeTransactionRequest) (*WithdrawStakeTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWithdrawStake not implemented")
}
func (*UnimplementedRuskServer) NewBid(context.Context, *BidTransactionRequest) (*BidTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (*UnimplementedRuskServer) NewWithdrawBid(context.Context, *WithdrawBidTransactionRequest) (*WithdrawBidTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWithdrawBid not implemented")
}
func (*UnimplementedRuskServer) NewDistribute(context.Context, *DistributeTransactionRequest) (*DistributeTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDistribute not implemented")
}
func (*UnimplementedRuskServer) NewWithdrawFees(context.Context, *WithdrawFeesTransactionRequest) (*WithdrawFeesTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWithdrawFees not implemented")
}
func (*UnimplementedRuskServer) NewSlash(context.Context, *SlashTransactionRequest) (*SlashTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSlash not implemented")
}

func RegisterRuskServer(s *grpc.Server, srv RuskServer) {
	s.RegisterService(&_Rusk_serviceDesc, srv)
}

func _Rusk_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_ValidateStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).ValidateStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/ValidateStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).ValidateStateTransition(ctx, req.(*ValidateStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_ExecuteStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).ExecuteStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/ExecuteStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).ExecuteStateTransition(ctx, req.(*ExecuteStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_GenerateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).GenerateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/GenerateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).GenerateScore(ctx, req.(*GenerateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_GenerateSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSecretKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).GenerateSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/GenerateSecretKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).GenerateSecretKey(ctx, req.(*GenerateSecretKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).Keys(ctx, req.(*SecretKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_FullScanOwnedNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).FullScanOwnedNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/FullScanOwnedNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).FullScanOwnedNotes(ctx, req.(*ViewKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewTransaction(ctx, req.(*NewTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_VerifyTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).VerifyTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/VerifyTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).VerifyTransaction(ctx, req.(*ContractCallTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewStake(ctx, req.(*StakeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_VerifyStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).VerifyStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/VerifyStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).VerifyStake(ctx, req.(*StakeTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewWithdrawStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawStakeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewWithdrawStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewWithdrawStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewWithdrawStake(ctx, req.(*WithdrawStakeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewBid(ctx, req.(*BidTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewWithdrawBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawBidTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewWithdrawBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewWithdrawBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewWithdrawBid(ctx, req.(*WithdrawBidTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewDistribute(ctx, req.(*DistributeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewWithdrawFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawFeesTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewWithdrawFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewWithdrawFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewWithdrawFees(ctx, req.(*WithdrawFeesTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rusk_NewSlash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlashTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuskServer).NewSlash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Rusk/NewSlash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuskServer).NewSlash(ctx, req.(*SlashTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rusk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.Rusk",
	HandlerType: (*RuskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Rusk_Echo_Handler,
		},
		{
			MethodName: "ValidateStateTransition",
			Handler:    _Rusk_ValidateStateTransition_Handler,
		},
		{
			MethodName: "ExecuteStateTransition",
			Handler:    _Rusk_ExecuteStateTransition_Handler,
		},
		{
			MethodName: "GenerateScore",
			Handler:    _Rusk_GenerateScore_Handler,
		},
		{
			MethodName: "GenerateSecretKey",
			Handler:    _Rusk_GenerateSecretKey_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Rusk_Keys_Handler,
		},
		{
			MethodName: "FullScanOwnedNotes",
			Handler:    _Rusk_FullScanOwnedNotes_Handler,
		},
		{
			MethodName: "NewTransaction",
			Handler:    _Rusk_NewTransaction_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Rusk_GetBalance_Handler,
		},
		{
			MethodName: "VerifyTransaction",
			Handler:    _Rusk_VerifyTransaction_Handler,
		},
		{
			MethodName: "NewStake",
			Handler:    _Rusk_NewStake_Handler,
		},
		{
			MethodName: "VerifyStake",
			Handler:    _Rusk_VerifyStake_Handler,
		},
		{
			MethodName: "NewWithdrawStake",
			Handler:    _Rusk_NewWithdrawStake_Handler,
		},
		{
			MethodName: "NewBid",
			Handler:    _Rusk_NewBid_Handler,
		},
		{
			MethodName: "NewWithdrawBid",
			Handler:    _Rusk_NewWithdrawBid_Handler,
		},
		{
			MethodName: "NewDistribute",
			Handler:    _Rusk_NewDistribute_Handler,
		},
		{
			MethodName: "NewWithdrawFees",
			Handler:    _Rusk_NewWithdrawFees_Handler,
		},
		{
			MethodName: "NewSlash",
			Handler:    _Rusk_NewSlash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rusk.proto",
}

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoClient interface {
	// Hash performs a Poseidon hashing and returns a scalar
	Hash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error)
}

type cryptoClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoClient(cc grpc.ClientConnInterface) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) Hash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, "/rusk.Crypto/Hash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
type CryptoServer interface {
	// Hash performs a Poseidon hashing and returns a scalar
	Hash(context.Context, *HashRequest) (*HashResponse, error)
}

// UnimplementedCryptoServer can be embedded to have forward compatible implementations.
type UnimplementedCryptoServer struct {
}

func (*UnimplementedCryptoServer) Hash(context.Context, *HashRequest) (*HashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hash not implemented")
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Crypto/Hash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).Hash(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hash",
			Handler:    _Crypto_Hash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rusk.proto",
}
