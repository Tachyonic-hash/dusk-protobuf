// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blindbid.proto

package rusk

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenerateScoreRequest struct {
	K                    *BlsScalar        `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	Seed                 *BlsScalar        `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	Secret               *JubJubCompressed `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Round                uint32            `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Step                 uint32            `protobuf:"varint,5,opt,name=step,proto3" json:"step,omitempty"`
	IndexStoredBid       uint64            `protobuf:"varint,6,opt,name=index_stored_bid,json=indexStoredBid,proto3" json:"index_stored_bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GenerateScoreRequest) Reset()         { *m = GenerateScoreRequest{} }
func (m *GenerateScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateScoreRequest) ProtoMessage()    {}
func (*GenerateScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_490c3399c7b8c3f4, []int{0}
}
func (m *GenerateScoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateScoreRequest.Unmarshal(m, b)
}
func (m *GenerateScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateScoreRequest.Marshal(b, m, deterministic)
}
func (m *GenerateScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateScoreRequest.Merge(m, src)
}
func (m *GenerateScoreRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateScoreRequest.Size(m)
}
func (m *GenerateScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateScoreRequest proto.InternalMessageInfo

func (m *GenerateScoreRequest) GetK() *BlsScalar {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *GenerateScoreRequest) GetSeed() *BlsScalar {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *GenerateScoreRequest) GetSecret() *JubJubCompressed {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *GenerateScoreRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *GenerateScoreRequest) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *GenerateScoreRequest) GetIndexStoredBid() uint64 {
	if m != nil {
		return m.IndexStoredBid
	}
	return 0
}

type GenerateScoreResponse struct {
	BlindbidProof        *Proof     `protobuf:"bytes,1,opt,name=blindbid_proof,json=blindbidProof,proto3" json:"blindbid_proof,omitempty"`
	Score                *BlsScalar `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	ProverIdentity       *BlsScalar `protobuf:"bytes,4,opt,name=prover_identity,json=proverIdentity,proto3" json:"prover_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GenerateScoreResponse) Reset()         { *m = GenerateScoreResponse{} }
func (m *GenerateScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateScoreResponse) ProtoMessage()    {}
func (*GenerateScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_490c3399c7b8c3f4, []int{1}
}
func (m *GenerateScoreResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateScoreResponse.Unmarshal(m, b)
}
func (m *GenerateScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateScoreResponse.Marshal(b, m, deterministic)
}
func (m *GenerateScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateScoreResponse.Merge(m, src)
}
func (m *GenerateScoreResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateScoreResponse.Size(m)
}
func (m *GenerateScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateScoreResponse proto.InternalMessageInfo

func (m *GenerateScoreResponse) GetBlindbidProof() *Proof {
	if m != nil {
		return m.BlindbidProof
	}
	return nil
}

func (m *GenerateScoreResponse) GetScore() *BlsScalar {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *GenerateScoreResponse) GetProverIdentity() *BlsScalar {
	if m != nil {
		return m.ProverIdentity
	}
	return nil
}

type VerifyScoreRequest struct {
	Proof                *Proof     `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Score                *BlsScalar `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Seed                 *BlsScalar `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
	ProverId             *BlsScalar `protobuf:"bytes,4,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	Round                uint64     `protobuf:"fixed64,5,opt,name=round,proto3" json:"round,omitempty"`
	Step                 uint32     `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	IndexStoredBid       uint64     `protobuf:"varint,7,opt,name=index_stored_bid,json=indexStoredBid,proto3" json:"index_stored_bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VerifyScoreRequest) Reset()         { *m = VerifyScoreRequest{} }
func (m *VerifyScoreRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyScoreRequest) ProtoMessage()    {}
func (*VerifyScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_490c3399c7b8c3f4, []int{2}
}
func (m *VerifyScoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyScoreRequest.Unmarshal(m, b)
}
func (m *VerifyScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyScoreRequest.Marshal(b, m, deterministic)
}
func (m *VerifyScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyScoreRequest.Merge(m, src)
}
func (m *VerifyScoreRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyScoreRequest.Size(m)
}
func (m *VerifyScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyScoreRequest proto.InternalMessageInfo

func (m *VerifyScoreRequest) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyScoreRequest) GetScore() *BlsScalar {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *VerifyScoreRequest) GetSeed() *BlsScalar {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *VerifyScoreRequest) GetProverId() *BlsScalar {
	if m != nil {
		return m.ProverId
	}
	return nil
}

func (m *VerifyScoreRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VerifyScoreRequest) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *VerifyScoreRequest) GetIndexStoredBid() uint64 {
	if m != nil {
		return m.IndexStoredBid
	}
	return 0
}

type VerifyScoreResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyScoreResponse) Reset()         { *m = VerifyScoreResponse{} }
func (m *VerifyScoreResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyScoreResponse) ProtoMessage()    {}
func (*VerifyScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_490c3399c7b8c3f4, []int{3}
}
func (m *VerifyScoreResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyScoreResponse.Unmarshal(m, b)
}
func (m *VerifyScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyScoreResponse.Marshal(b, m, deterministic)
}
func (m *VerifyScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyScoreResponse.Merge(m, src)
}
func (m *VerifyScoreResponse) XXX_Size() int {
	return xxx_messageInfo_VerifyScoreResponse.Size(m)
}
func (m *VerifyScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyScoreResponse proto.InternalMessageInfo

func (m *VerifyScoreResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*GenerateScoreRequest)(nil), "rusk.GenerateScoreRequest")
	proto.RegisterType((*GenerateScoreResponse)(nil), "rusk.GenerateScoreResponse")
	proto.RegisterType((*VerifyScoreRequest)(nil), "rusk.VerifyScoreRequest")
	proto.RegisterType((*VerifyScoreResponse)(nil), "rusk.VerifyScoreResponse")
}

func init() { proto.RegisterFile("blindbid.proto", fileDescriptor_490c3399c7b8c3f4) }

var fileDescriptor_490c3399c7b8c3f4 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xc9, 0x6e, 0xdb, 0x5d, 0xa6, 0x6a, 0x0b, 0x66, 0x41, 0xa1, 0x08, 0xa9, 0x14, 0x21,
	0x55, 0x88, 0x4d, 0xa5, 0x72, 0x41, 0xe2, 0x16, 0x90, 0x10, 0x3d, 0xa1, 0x54, 0xe2, 0xc0, 0x25,
	0x4a, 0xec, 0x29, 0x6b, 0xa5, 0x8d, 0x83, 0xc7, 0x59, 0xe8, 0x03, 0xf0, 0x24, 0x5c, 0x79, 0x26,
	0x9e, 0x05, 0xc5, 0x4e, 0x58, 0xba, 0xa4, 0xc0, 0xcd, 0x9e, 0xff, 0xf7, 0xf4, 0x9f, 0xf9, 0x1a,
	0x18, 0xa6, 0x1b, 0x99, 0x8b, 0x54, 0x8a, 0xa0, 0xd0, 0xca, 0x28, 0xd6, 0xd1, 0x25, 0x65, 0x63,
	0x96, 0x26, 0x24, 0x79, 0xbc, 0x96, 0xb8, 0x11, 0xe4, 0x94, 0xf1, 0x6d, 0xa3, 0x93, 0x9c, 0x12,
	0x6e, 0xa4, 0xca, 0xeb, 0x12, 0x64, 0xb8, 0xab, 0xe5, 0xe9, 0x0f, 0x0f, 0xce, 0xde, 0x60, 0x8e,
	0x3a, 0x31, 0xb8, 0xe2, 0x4a, 0x63, 0x84, 0x9f, 0x4a, 0x24, 0xc3, 0x1e, 0x82, 0x97, 0xf9, 0xde,
	0xc4, 0x9b, 0xf5, 0x17, 0xa3, 0xa0, 0xea, 0x1e, 0x84, 0x1b, 0x5a, 0xf1, 0x64, 0x93, 0xe8, 0xc8,
	0xcb, 0xd8, 0x63, 0xe8, 0x10, 0xa2, 0xf0, 0x8f, 0xda, 0x1d, 0x56, 0x64, 0x01, 0xf4, 0x08, 0xb9,
	0x46, 0xe3, 0x1f, 0x5b, 0xdb, 0x3d, 0x67, 0x5b, 0x96, 0xe9, 0xb2, 0x4c, 0x5f, 0xa9, 0x6d, 0xa1,
	0x91, 0x08, 0x45, 0x54, 0xbb, 0xd8, 0x19, 0x74, 0xb5, 0x2a, 0x73, 0xe1, 0x77, 0x26, 0xde, 0x6c,
	0x10, 0xb9, 0x0b, 0x63, 0xd0, 0x21, 0x83, 0x85, 0xdf, 0xb5, 0x45, 0x7b, 0x66, 0x33, 0xb8, 0x25,
	0x73, 0x81, 0x5f, 0x62, 0x32, 0x4a, 0xa3, 0x88, 0x53, 0x29, 0xfc, 0xde, 0xc4, 0x9b, 0x75, 0xa2,
	0xa1, 0xad, 0xaf, 0x6c, 0x39, 0x94, 0x62, 0xfa, 0xdd, 0x83, 0xbb, 0xd7, 0x06, 0xa4, 0x42, 0xe5,
	0x84, 0x6c, 0x71, 0xb5, 0xc5, 0xb8, 0xd0, 0x4a, 0xad, 0xeb, 0x71, 0xfb, 0x2e, 0xe5, 0xbb, 0xaa,
	0x14, 0x0d, 0x1a, 0x8b, 0xbd, 0xb2, 0x27, 0xd0, 0xa5, 0xaa, 0xc9, 0xa1, 0xb9, 0x9d, 0xca, 0x5e,
	0xc0, 0xa8, 0xd0, 0xea, 0x12, 0x75, 0x2c, 0x05, 0xe6, 0x46, 0x9a, 0x9d, 0x1d, 0xa9, 0xe5, 0xc1,
	0xd0, 0xf9, 0xde, 0xd6, 0xb6, 0xe9, 0xd7, 0x23, 0x60, 0xef, 0x51, 0xcb, 0xf5, 0x6e, 0x8f, 0xc6,
	0x23, 0xe8, 0x1e, 0x8c, 0xe8, 0x94, 0xff, 0x8d, 0xd6, 0x80, 0x3b, 0xfe, 0x1b, 0xb8, 0x67, 0x70,
	0xf3, 0x57, 0xfe, 0x43, 0xc9, 0x4f, 0x9b, 0xe4, 0x57, 0xd8, 0x2a, 0x42, 0xbd, 0xeb, 0xd8, 0x7a,
	0xff, 0xc0, 0x76, 0xd2, 0x8a, 0x6d, 0x0e, 0x77, 0xf6, 0xd6, 0x50, 0x33, 0xf3, 0xe1, 0x84, 0x4a,
	0xce, 0x91, 0xc8, 0x6e, 0xe2, 0x34, 0x6a, 0xae, 0x8b, 0x6f, 0x1e, 0x8c, 0xc2, 0x8a, 0x55, 0x28,
	0xc5, 0x0a, 0xf5, 0xa5, 0xe4, 0xc8, 0x96, 0x30, 0xd8, 0x43, 0xcf, 0xc6, 0x6e, 0x88, 0xb6, 0x3f,
	0xfc, 0xf8, 0x41, 0xab, 0xe6, 0x7e, 0x77, 0x7a, 0x83, 0xbd, 0x86, 0xfe, 0x6f, 0x81, 0x98, 0xef,
	0xdc, 0x7f, 0xa2, 0x1a, 0xdf, 0x6f, 0x51, 0x9a, 0x2e, 0xe1, 0xd3, 0x0f, 0xb3, 0x8f, 0xd2, 0x5c,
	0x94, 0x69, 0xc0, 0xd5, 0x76, 0x2e, 0x4a, 0xca, 0xce, 0x73, 0x34, 0x9f, 0x95, 0xce, 0xe6, 0xd5,
	0xab, 0x73, 0xe2, 0x17, 0xb8, 0x4d, 0x5e, 0x56, 0xe7, 0xb4, 0x67, 0xbf, 0xd0, 0xe7, 0x3f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x76, 0xff, 0x1a, 0x9d, 0xec, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlindBidServiceClient is the client API for BlindBidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlindBidServiceClient interface {
	// Generate a proof of blind bid, and a score.
	GenerateScore(ctx context.Context, in *GenerateScoreRequest, opts ...grpc.CallOption) (*GenerateScoreResponse, error)
	// Verify a proof of blind bid, and the associated score.
	VerifyScore(ctx context.Context, in *VerifyScoreRequest, opts ...grpc.CallOption) (*VerifyScoreResponse, error)
}

type blindBidServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlindBidServiceClient(cc *grpc.ClientConn) BlindBidServiceClient {
	return &blindBidServiceClient{cc}
}

func (c *blindBidServiceClient) GenerateScore(ctx context.Context, in *GenerateScoreRequest, opts ...grpc.CallOption) (*GenerateScoreResponse, error) {
	out := new(GenerateScoreResponse)
	err := c.cc.Invoke(ctx, "/rusk.BlindBidService/GenerateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blindBidServiceClient) VerifyScore(ctx context.Context, in *VerifyScoreRequest, opts ...grpc.CallOption) (*VerifyScoreResponse, error) {
	out := new(VerifyScoreResponse)
	err := c.cc.Invoke(ctx, "/rusk.BlindBidService/VerifyScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlindBidServiceServer is the server API for BlindBidService service.
type BlindBidServiceServer interface {
	// Generate a proof of blind bid, and a score.
	GenerateScore(context.Context, *GenerateScoreRequest) (*GenerateScoreResponse, error)
	// Verify a proof of blind bid, and the associated score.
	VerifyScore(context.Context, *VerifyScoreRequest) (*VerifyScoreResponse, error)
}

// UnimplementedBlindBidServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlindBidServiceServer struct {
}

func (*UnimplementedBlindBidServiceServer) GenerateScore(ctx context.Context, req *GenerateScoreRequest) (*GenerateScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateScore not implemented")
}
func (*UnimplementedBlindBidServiceServer) VerifyScore(ctx context.Context, req *VerifyScoreRequest) (*VerifyScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyScore not implemented")
}

func RegisterBlindBidServiceServer(s *grpc.Server, srv BlindBidServiceServer) {
	s.RegisterService(&_BlindBidService_serviceDesc, srv)
}

func _BlindBidService_GenerateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlindBidServiceServer).GenerateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.BlindBidService/GenerateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlindBidServiceServer).GenerateScore(ctx, req.(*GenerateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlindBidService_VerifyScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlindBidServiceServer).VerifyScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.BlindBidService/VerifyScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlindBidServiceServer).VerifyScore(ctx, req.(*VerifyScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlindBidService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.BlindBidService",
	HandlerType: (*BlindBidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateScore",
			Handler:    _BlindBidService_GenerateScore_Handler,
		},
		{
			MethodName: "VerifyScore",
			Handler:    _BlindBidService_VerifyScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blindbid.proto",
}
