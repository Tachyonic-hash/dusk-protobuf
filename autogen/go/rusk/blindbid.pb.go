// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.11.4
// source: blindbid.proto

package rusk

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GenerateScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K              *BlsScalar        `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	Seed           *BlsScalar        `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	Secret         *JubJubCompressed `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Round          uint32            `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Step           uint32            `protobuf:"varint,5,opt,name=step,proto3" json:"step,omitempty"`
	IndexStoredBid uint64            `protobuf:"varint,6,opt,name=index_stored_bid,json=indexStoredBid,proto3" json:"index_stored_bid,omitempty"`
}

func (x *GenerateScoreRequest) Reset() {
	*x = GenerateScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blindbid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateScoreRequest) ProtoMessage() {}

func (x *GenerateScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blindbid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateScoreRequest.ProtoReflect.Descriptor instead.
func (*GenerateScoreRequest) Descriptor() ([]byte, []int) {
	return file_blindbid_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateScoreRequest) GetK() *BlsScalar {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *GenerateScoreRequest) GetSeed() *BlsScalar {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *GenerateScoreRequest) GetSecret() *JubJubCompressed {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *GenerateScoreRequest) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GenerateScoreRequest) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *GenerateScoreRequest) GetIndexStoredBid() uint64 {
	if x != nil {
		return x.IndexStoredBid
	}
	return 0
}

type GenerateScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlindbidProof  *Proof     `protobuf:"bytes,1,opt,name=blindbid_proof,json=blindbidProof,proto3" json:"blindbid_proof,omitempty"`
	Score          *BlsScalar `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	ProverIdentity *BlsScalar `protobuf:"bytes,4,opt,name=prover_identity,json=proverIdentity,proto3" json:"prover_identity,omitempty"`
}

func (x *GenerateScoreResponse) Reset() {
	*x = GenerateScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blindbid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateScoreResponse) ProtoMessage() {}

func (x *GenerateScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blindbid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateScoreResponse.ProtoReflect.Descriptor instead.
func (*GenerateScoreResponse) Descriptor() ([]byte, []int) {
	return file_blindbid_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateScoreResponse) GetBlindbidProof() *Proof {
	if x != nil {
		return x.BlindbidProof
	}
	return nil
}

func (x *GenerateScoreResponse) GetScore() *BlsScalar {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *GenerateScoreResponse) GetProverIdentity() *BlsScalar {
	if x != nil {
		return x.ProverIdentity
	}
	return nil
}

type VerifyScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof          *Proof     `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Score          *BlsScalar `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Seed           *BlsScalar `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
	ProverId       *BlsScalar `protobuf:"bytes,4,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	Round          uint64     `protobuf:"fixed64,5,opt,name=round,proto3" json:"round,omitempty"`
	Step           uint32     `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	IndexStoredBid uint64     `protobuf:"varint,7,opt,name=index_stored_bid,json=indexStoredBid,proto3" json:"index_stored_bid,omitempty"`
}

func (x *VerifyScoreRequest) Reset() {
	*x = VerifyScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blindbid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyScoreRequest) ProtoMessage() {}

func (x *VerifyScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blindbid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyScoreRequest.ProtoReflect.Descriptor instead.
func (*VerifyScoreRequest) Descriptor() ([]byte, []int) {
	return file_blindbid_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyScoreRequest) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *VerifyScoreRequest) GetScore() *BlsScalar {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *VerifyScoreRequest) GetSeed() *BlsScalar {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *VerifyScoreRequest) GetProverId() *BlsScalar {
	if x != nil {
		return x.ProverId
	}
	return nil
}

func (x *VerifyScoreRequest) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *VerifyScoreRequest) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *VerifyScoreRequest) GetIndexStoredBid() uint64 {
	if x != nil {
		return x.IndexStoredBid
	}
	return 0
}

type VerifyScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *VerifyScoreResponse) Reset() {
	*x = VerifyScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blindbid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyScoreResponse) ProtoMessage() {}

func (x *VerifyScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blindbid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyScoreResponse.ProtoReflect.Descriptor instead.
func (*VerifyScoreResponse) Descriptor() ([]byte, []int) {
	return file_blindbid_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyScoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_blindbid_proto protoreflect.FileDescriptor

var file_blindbid_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x62, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x72, 0x75, 0x73, 0x6b, 0x1a, 0x12, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6b,
	0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x6c, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x01,
	0x6b, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x6c, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4a, 0x75,
	0x62, 0x4a, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x69, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0d, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42,
	0x6c, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x42, 0x6c, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x85, 0x02, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x6c, 0x73, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x42, 0x6c, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x42, 0x6c, 0x73, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x69,
	0x64, 0x22, 0x2f, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x32, 0xa3, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x69, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x75, 0x73, 0x6b, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x72, 0x75, 0x73, 0x6b, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3b,
	0x72, 0x75, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blindbid_proto_rawDescOnce sync.Once
	file_blindbid_proto_rawDescData = file_blindbid_proto_rawDesc
)

func file_blindbid_proto_rawDescGZIP() []byte {
	file_blindbid_proto_rawDescOnce.Do(func() {
		file_blindbid_proto_rawDescData = protoimpl.X.CompressGZIP(file_blindbid_proto_rawDescData)
	})
	return file_blindbid_proto_rawDescData
}

var file_blindbid_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_blindbid_proto_goTypes = []interface{}{
	(*GenerateScoreRequest)(nil),  // 0: rusk.GenerateScoreRequest
	(*GenerateScoreResponse)(nil), // 1: rusk.GenerateScoreResponse
	(*VerifyScoreRequest)(nil),    // 2: rusk.VerifyScoreRequest
	(*VerifyScoreResponse)(nil),   // 3: rusk.VerifyScoreResponse
	(*BlsScalar)(nil),             // 4: rusk.BlsScalar
	(*JubJubCompressed)(nil),      // 5: rusk.JubJubCompressed
	(*Proof)(nil),                 // 6: rusk.Proof
}
var file_blindbid_proto_depIdxs = []int32{
	4,  // 0: rusk.GenerateScoreRequest.k:type_name -> rusk.BlsScalar
	4,  // 1: rusk.GenerateScoreRequest.seed:type_name -> rusk.BlsScalar
	5,  // 2: rusk.GenerateScoreRequest.secret:type_name -> rusk.JubJubCompressed
	6,  // 3: rusk.GenerateScoreResponse.blindbid_proof:type_name -> rusk.Proof
	4,  // 4: rusk.GenerateScoreResponse.score:type_name -> rusk.BlsScalar
	4,  // 5: rusk.GenerateScoreResponse.prover_identity:type_name -> rusk.BlsScalar
	6,  // 6: rusk.VerifyScoreRequest.proof:type_name -> rusk.Proof
	4,  // 7: rusk.VerifyScoreRequest.score:type_name -> rusk.BlsScalar
	4,  // 8: rusk.VerifyScoreRequest.seed:type_name -> rusk.BlsScalar
	4,  // 9: rusk.VerifyScoreRequest.prover_id:type_name -> rusk.BlsScalar
	0,  // 10: rusk.BlindBidService.GenerateScore:input_type -> rusk.GenerateScoreRequest
	2,  // 11: rusk.BlindBidService.VerifyScore:input_type -> rusk.VerifyScoreRequest
	1,  // 12: rusk.BlindBidService.GenerateScore:output_type -> rusk.GenerateScoreResponse
	3,  // 13: rusk.BlindBidService.VerifyScore:output_type -> rusk.VerifyScoreResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_blindbid_proto_init() }
func file_blindbid_proto_init() {
	if File_blindbid_proto != nil {
		return
	}
	file_basic_fields_proto_init()
	file_transaction_proto_init()
	file_keys_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blindbid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blindbid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blindbid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blindbid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blindbid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blindbid_proto_goTypes,
		DependencyIndexes: file_blindbid_proto_depIdxs,
		MessageInfos:      file_blindbid_proto_msgTypes,
	}.Build()
	File_blindbid_proto = out.File
	file_blindbid_proto_rawDesc = nil
	file_blindbid_proto_goTypes = nil
	file_blindbid_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlindBidServiceClient is the client API for BlindBidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlindBidServiceClient interface {
	// Generate a proof of blind bid, and a score.
	GenerateScore(ctx context.Context, in *GenerateScoreRequest, opts ...grpc.CallOption) (*GenerateScoreResponse, error)
	// Verify a proof of blind bid, and the associated score.
	VerifyScore(ctx context.Context, in *VerifyScoreRequest, opts ...grpc.CallOption) (*VerifyScoreResponse, error)
}

type blindBidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlindBidServiceClient(cc grpc.ClientConnInterface) BlindBidServiceClient {
	return &blindBidServiceClient{cc}
}

func (c *blindBidServiceClient) GenerateScore(ctx context.Context, in *GenerateScoreRequest, opts ...grpc.CallOption) (*GenerateScoreResponse, error) {
	out := new(GenerateScoreResponse)
	err := c.cc.Invoke(ctx, "/rusk.BlindBidService/GenerateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blindBidServiceClient) VerifyScore(ctx context.Context, in *VerifyScoreRequest, opts ...grpc.CallOption) (*VerifyScoreResponse, error) {
	out := new(VerifyScoreResponse)
	err := c.cc.Invoke(ctx, "/rusk.BlindBidService/VerifyScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlindBidServiceServer is the server API for BlindBidService service.
type BlindBidServiceServer interface {
	// Generate a proof of blind bid, and a score.
	GenerateScore(context.Context, *GenerateScoreRequest) (*GenerateScoreResponse, error)
	// Verify a proof of blind bid, and the associated score.
	VerifyScore(context.Context, *VerifyScoreRequest) (*VerifyScoreResponse, error)
}

// UnimplementedBlindBidServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlindBidServiceServer struct {
}

func (*UnimplementedBlindBidServiceServer) GenerateScore(context.Context, *GenerateScoreRequest) (*GenerateScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateScore not implemented")
}
func (*UnimplementedBlindBidServiceServer) VerifyScore(context.Context, *VerifyScoreRequest) (*VerifyScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyScore not implemented")
}

func RegisterBlindBidServiceServer(s *grpc.Server, srv BlindBidServiceServer) {
	s.RegisterService(&_BlindBidService_serviceDesc, srv)
}

func _BlindBidService_GenerateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlindBidServiceServer).GenerateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.BlindBidService/GenerateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlindBidServiceServer).GenerateScore(ctx, req.(*GenerateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlindBidService_VerifyScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlindBidServiceServer).VerifyScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.BlindBidService/VerifyScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlindBidServiceServer).VerifyScore(ctx, req.(*VerifyScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlindBidService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.BlindBidService",
	HandlerType: (*BlindBidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateScore",
			Handler:    _BlindBidService_GenerateScore_Handler,
		},
		{
			MethodName: "VerifyScore",
			Handler:    _BlindBidService_VerifyScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blindbid.proto",
}
