// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bid.proto

package rusk

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BidServiceMock struct{}

func (m *BidServiceMock) NewBid(ctx context.Context, req *BidTransactionRequest) (*BidTransaction, error) {
	res :=
		&BidTransaction{
			BidTreeStorageIndex: 333,
			Tx: &Transaction{
				Version: 173,
				Type:    118,
				TxPayload: &TransactionPayload{
					Anchor: &BlsScalar{},
					Nullifier: []*BlsScalar{
						&BlsScalar{},
						&BlsScalar{},
						&BlsScalar{},
						&BlsScalar{},
						&BlsScalar{},
						&BlsScalar{},
						&BlsScalar{},
						&BlsScalar{},
					},
					Crossover: &Crossover{
						ValueComm:    &JubJubCompressed{},
						Nonce:        &BlsScalar{},
						EncyptedData: &PoseidonCipher{},
					},
					Notes: []*Note{
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
						&Note{
							Randomness:   &JubJubCompressed{},
							PkR:          &JubJubCompressed{},
							Commitment:   &JubJubCompressed{},
							Nonce:        &BlsScalar{},
							EncyptedData: &PoseidonCipher{},
						},
					},
					Fee: &Fee{
						GasLimit: 928,
						GasPrice: 404,
						R:        &JubJubCompressed{},
						PkR:      &JubJubCompressed{},
					},
					SpendingProof: &Proof{},
				},
			},
		}
	return res, nil
}
func (m *BidServiceMock) FindBid(ctx context.Context, req *FindBidRequest) (*BidList, error) {
	res :=
		&BidList{
			BidList: []*Bid{
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
				&Bid{
					EncryptedData: &PoseidonCipher{},
					HashedSecret:  &BlsScalar{},
					Nonce:         &BlsScalar{},
					PkR: &StealthAddress{
						RG:  &JubJubCompressed{},
						PkR: &JubJubCompressed{},
					},
					Commitment:    &JubJubCompressed{},
					ElegibilityTs: &BlsScalar{},
					ExpirationTs:  &BlsScalar{},
				},
			},
			BidHashList: []*BlsScalar{
				&BlsScalar{},
				&BlsScalar{},
				&BlsScalar{},
				&BlsScalar{},
				&BlsScalar{},
				&BlsScalar{},
				&BlsScalar{},
				&BlsScalar{},
			},
		}
	return res, nil
}
