// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: note.proto

package rusk

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NoteType int32

const (
	NoteType_TRANSPARENT NoteType = 0
	NoteType_OBFUSCATED  NoteType = 1
)

// Enum value maps for NoteType.
var (
	NoteType_name = map[int32]string{
		0: "TRANSPARENT",
		1: "OBFUSCATED",
	}
	NoteType_value = map[string]int32{
		"TRANSPARENT": 0,
		"OBFUSCATED":  1,
	}
)

func (x NoteType) Enum() *NoteType {
	p := new(NoteType)
	*p = x
	return p
}

func (x NoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_note_proto_enumTypes[0].Descriptor()
}

func (NoteType) Type() protoreflect.EnumType {
	return &file_note_proto_enumTypes[0]
}

func (x NoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteType.Descriptor instead.
func (NoteType) EnumDescriptor() ([]byte, []int) {
	return file_note_proto_rawDescGZIP(), []int{0}
}

type Nullifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H *Scalar `protobuf:"bytes,1,opt,name=h,proto3" json:"h,omitempty"`
}

func (x *Nullifier) Reset() {
	*x = Nullifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_note_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nullifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nullifier) ProtoMessage() {}

func (x *Nullifier) ProtoReflect() protoreflect.Message {
	mi := &file_note_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nullifier.ProtoReflect.Descriptor instead.
func (*Nullifier) Descriptor() ([]byte, []int) {
	return file_note_proto_rawDescGZIP(), []int{0}
}

func (x *Nullifier) GetH() *Scalar {
	if x != nil {
		return x.H
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteType        NoteType         `protobuf:"varint,1,opt,name=note_type,json=noteType,proto3,enum=rusk.NoteType" json:"note_type,omitempty"`
	Pos             uint64           `protobuf:"fixed64,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Nonce           *Nonce           `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	RG              *CompressedPoint `protobuf:"bytes,4,opt,name=r_g,json=rG,proto3" json:"r_g,omitempty"`
	PkR             *CompressedPoint `protobuf:"bytes,5,opt,name=pk_r,json=pkR,proto3" json:"pk_r,omitempty"`
	ValueCommitment *Scalar          `protobuf:"bytes,6,opt,name=value_commitment,json=valueCommitment,proto3" json:"value_commitment,omitempty"`
	// Types that are assignable to BlindingFactor:
	//	*Note_TransparentBlindingFactor
	//	*Note_EncryptedBlindingFactor
	BlindingFactor isNote_BlindingFactor `protobuf_oneof:"blinding_factor"`
	// Types that are assignable to Value:
	//	*Note_TransparentValue
	//	*Note_EncryptedValue
	Value isNote_Value `protobuf_oneof:"value"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_note_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_note_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_note_proto_rawDescGZIP(), []int{1}
}

func (x *Note) GetNoteType() NoteType {
	if x != nil {
		return x.NoteType
	}
	return NoteType_TRANSPARENT
}

func (x *Note) GetPos() uint64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Note) GetNonce() *Nonce {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Note) GetRG() *CompressedPoint {
	if x != nil {
		return x.RG
	}
	return nil
}

func (x *Note) GetPkR() *CompressedPoint {
	if x != nil {
		return x.PkR
	}
	return nil
}

func (x *Note) GetValueCommitment() *Scalar {
	if x != nil {
		return x.ValueCommitment
	}
	return nil
}

func (m *Note) GetBlindingFactor() isNote_BlindingFactor {
	if m != nil {
		return m.BlindingFactor
	}
	return nil
}

func (x *Note) GetTransparentBlindingFactor() *Scalar {
	if x, ok := x.GetBlindingFactor().(*Note_TransparentBlindingFactor); ok {
		return x.TransparentBlindingFactor
	}
	return nil
}

func (x *Note) GetEncryptedBlindingFactor() []byte {
	if x, ok := x.GetBlindingFactor().(*Note_EncryptedBlindingFactor); ok {
		return x.EncryptedBlindingFactor
	}
	return nil
}

func (m *Note) GetValue() isNote_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Note) GetTransparentValue() uint64 {
	if x, ok := x.GetValue().(*Note_TransparentValue); ok {
		return x.TransparentValue
	}
	return 0
}

func (x *Note) GetEncryptedValue() []byte {
	if x, ok := x.GetValue().(*Note_EncryptedValue); ok {
		return x.EncryptedValue
	}
	return nil
}

type isNote_BlindingFactor interface {
	isNote_BlindingFactor()
}

type Note_TransparentBlindingFactor struct {
	TransparentBlindingFactor *Scalar `protobuf:"bytes,7,opt,name=transparent_blinding_factor,json=transparentBlindingFactor,proto3,oneof"`
}

type Note_EncryptedBlindingFactor struct {
	EncryptedBlindingFactor []byte `protobuf:"bytes,8,opt,name=encrypted_blinding_factor,json=encryptedBlindingFactor,proto3,oneof"`
}

func (*Note_TransparentBlindingFactor) isNote_BlindingFactor() {}

func (*Note_EncryptedBlindingFactor) isNote_BlindingFactor() {}

type isNote_Value interface {
	isNote_Value()
}

type Note_TransparentValue struct {
	TransparentValue uint64 `protobuf:"fixed64,9,opt,name=transparent_value,json=transparentValue,proto3,oneof"`
}

type Note_EncryptedValue struct {
	EncryptedValue []byte `protobuf:"bytes,10,opt,name=encrypted_value,json=encryptedValue,proto3,oneof"`
}

func (*Note_TransparentValue) isNote_Value() {}

func (*Note_EncryptedValue) isNote_Value() {}

type DecryptedNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteType        NoteType         `protobuf:"varint,1,opt,name=note_type,json=noteType,proto3,enum=rusk.NoteType" json:"note_type,omitempty"`
	Pos             uint64           `protobuf:"fixed64,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Value           uint64           `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Nonce           *Nonce           `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	RG              *CompressedPoint `protobuf:"bytes,5,opt,name=r_g,json=rG,proto3" json:"r_g,omitempty"`
	PkR             *CompressedPoint `protobuf:"bytes,6,opt,name=pk_r,json=pkR,proto3" json:"pk_r,omitempty"`
	ValueCommitment *Scalar          `protobuf:"bytes,7,opt,name=value_commitment,json=valueCommitment,proto3" json:"value_commitment,omitempty"`
	BlindingFactor  *Scalar          `protobuf:"bytes,8,opt,name=blinding_factor,json=blindingFactor,proto3" json:"blinding_factor,omitempty"`
	// Types that are assignable to RawBlindingFactor:
	//	*DecryptedNote_TransparentBlindingFactor
	//	*DecryptedNote_EncryptedBlindingFactor
	RawBlindingFactor isDecryptedNote_RawBlindingFactor `protobuf_oneof:"rawBlindingFactor"`
	// Types that are assignable to RawValue:
	//	*DecryptedNote_TransparentValue
	//	*DecryptedNote_EncryptedValue
	RawValue isDecryptedNote_RawValue `protobuf_oneof:"rawValue"`
}

func (x *DecryptedNote) Reset() {
	*x = DecryptedNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_note_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptedNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptedNote) ProtoMessage() {}

func (x *DecryptedNote) ProtoReflect() protoreflect.Message {
	mi := &file_note_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptedNote.ProtoReflect.Descriptor instead.
func (*DecryptedNote) Descriptor() ([]byte, []int) {
	return file_note_proto_rawDescGZIP(), []int{2}
}

func (x *DecryptedNote) GetNoteType() NoteType {
	if x != nil {
		return x.NoteType
	}
	return NoteType_TRANSPARENT
}

func (x *DecryptedNote) GetPos() uint64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *DecryptedNote) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DecryptedNote) GetNonce() *Nonce {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DecryptedNote) GetRG() *CompressedPoint {
	if x != nil {
		return x.RG
	}
	return nil
}

func (x *DecryptedNote) GetPkR() *CompressedPoint {
	if x != nil {
		return x.PkR
	}
	return nil
}

func (x *DecryptedNote) GetValueCommitment() *Scalar {
	if x != nil {
		return x.ValueCommitment
	}
	return nil
}

func (x *DecryptedNote) GetBlindingFactor() *Scalar {
	if x != nil {
		return x.BlindingFactor
	}
	return nil
}

func (m *DecryptedNote) GetRawBlindingFactor() isDecryptedNote_RawBlindingFactor {
	if m != nil {
		return m.RawBlindingFactor
	}
	return nil
}

func (x *DecryptedNote) GetTransparentBlindingFactor() *Scalar {
	if x, ok := x.GetRawBlindingFactor().(*DecryptedNote_TransparentBlindingFactor); ok {
		return x.TransparentBlindingFactor
	}
	return nil
}

func (x *DecryptedNote) GetEncryptedBlindingFactor() []byte {
	if x, ok := x.GetRawBlindingFactor().(*DecryptedNote_EncryptedBlindingFactor); ok {
		return x.EncryptedBlindingFactor
	}
	return nil
}

func (m *DecryptedNote) GetRawValue() isDecryptedNote_RawValue {
	if m != nil {
		return m.RawValue
	}
	return nil
}

func (x *DecryptedNote) GetTransparentValue() uint64 {
	if x, ok := x.GetRawValue().(*DecryptedNote_TransparentValue); ok {
		return x.TransparentValue
	}
	return 0
}

func (x *DecryptedNote) GetEncryptedValue() []byte {
	if x, ok := x.GetRawValue().(*DecryptedNote_EncryptedValue); ok {
		return x.EncryptedValue
	}
	return nil
}

type isDecryptedNote_RawBlindingFactor interface {
	isDecryptedNote_RawBlindingFactor()
}

type DecryptedNote_TransparentBlindingFactor struct {
	TransparentBlindingFactor *Scalar `protobuf:"bytes,9,opt,name=transparent_blinding_factor,json=transparentBlindingFactor,proto3,oneof"`
}

type DecryptedNote_EncryptedBlindingFactor struct {
	EncryptedBlindingFactor []byte `protobuf:"bytes,10,opt,name=encrypted_blinding_factor,json=encryptedBlindingFactor,proto3,oneof"`
}

func (*DecryptedNote_TransparentBlindingFactor) isDecryptedNote_RawBlindingFactor() {}

func (*DecryptedNote_EncryptedBlindingFactor) isDecryptedNote_RawBlindingFactor() {}

type isDecryptedNote_RawValue interface {
	isDecryptedNote_RawValue()
}

type DecryptedNote_TransparentValue struct {
	TransparentValue uint64 `protobuf:"fixed64,11,opt,name=transparent_value,json=transparentValue,proto3,oneof"`
}

type DecryptedNote_EncryptedValue struct {
	EncryptedValue []byte `protobuf:"bytes,12,opt,name=encrypted_value,json=encryptedValue,proto3,oneof"`
}

func (*DecryptedNote_TransparentValue) isDecryptedNote_RawValue() {}

func (*DecryptedNote_EncryptedValue) isDecryptedNote_RawValue() {}

var File_note_proto protoreflect.FileDescriptor

var file_note_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x75,
	0x73, 0x6b, 0x1a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x27, 0x0a, 0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x01,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x01, 0x68, 0x22, 0xf7, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x5f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x72, 0x47, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x6b, 0x5f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x03, 0x70, 0x6b, 0x52, 0x12, 0x37, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x0f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x48, 0x00, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x48, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x72, 0x5f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x02, 0x72, 0x47, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6b, 0x5f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x70, 0x6b, 0x52, 0x12, 0x37,
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x0e,
	0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4e,
	0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x48, 0x00, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x48, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x72, 0x61, 0x77, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x2b, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x42, 0x46, 0x55, 0x53, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x75, 0x73, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x75, 0x73, 0x6b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_note_proto_rawDescOnce sync.Once
	file_note_proto_rawDescData = file_note_proto_rawDesc
)

func file_note_proto_rawDescGZIP() []byte {
	file_note_proto_rawDescOnce.Do(func() {
		file_note_proto_rawDescData = protoimpl.X.CompressGZIP(file_note_proto_rawDescData)
	})
	return file_note_proto_rawDescData
}

var file_note_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_note_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_note_proto_goTypes = []interface{}{
	(NoteType)(0),           // 0: rusk.NoteType
	(*Nullifier)(nil),       // 1: rusk.Nullifier
	(*Note)(nil),            // 2: rusk.Note
	(*DecryptedNote)(nil),   // 3: rusk.DecryptedNote
	(*Scalar)(nil),          // 4: rusk.Scalar
	(*Nonce)(nil),           // 5: rusk.Nonce
	(*CompressedPoint)(nil), // 6: rusk.CompressedPoint
}
var file_note_proto_depIdxs = []int32{
	4,  // 0: rusk.Nullifier.h:type_name -> rusk.Scalar
	0,  // 1: rusk.Note.note_type:type_name -> rusk.NoteType
	5,  // 2: rusk.Note.nonce:type_name -> rusk.Nonce
	6,  // 3: rusk.Note.r_g:type_name -> rusk.CompressedPoint
	6,  // 4: rusk.Note.pk_r:type_name -> rusk.CompressedPoint
	4,  // 5: rusk.Note.value_commitment:type_name -> rusk.Scalar
	4,  // 6: rusk.Note.transparent_blinding_factor:type_name -> rusk.Scalar
	0,  // 7: rusk.DecryptedNote.note_type:type_name -> rusk.NoteType
	5,  // 8: rusk.DecryptedNote.nonce:type_name -> rusk.Nonce
	6,  // 9: rusk.DecryptedNote.r_g:type_name -> rusk.CompressedPoint
	6,  // 10: rusk.DecryptedNote.pk_r:type_name -> rusk.CompressedPoint
	4,  // 11: rusk.DecryptedNote.value_commitment:type_name -> rusk.Scalar
	4,  // 12: rusk.DecryptedNote.blinding_factor:type_name -> rusk.Scalar
	4,  // 13: rusk.DecryptedNote.transparent_blinding_factor:type_name -> rusk.Scalar
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_note_proto_init() }
func file_note_proto_init() {
	if File_note_proto != nil {
		return
	}
	file_field_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_note_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nullifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_note_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_note_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptedNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_note_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Note_TransparentBlindingFactor)(nil),
		(*Note_EncryptedBlindingFactor)(nil),
		(*Note_TransparentValue)(nil),
		(*Note_EncryptedValue)(nil),
	}
	file_note_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DecryptedNote_TransparentBlindingFactor)(nil),
		(*DecryptedNote_EncryptedBlindingFactor)(nil),
		(*DecryptedNote_TransparentValue)(nil),
		(*DecryptedNote_EncryptedValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_note_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_note_proto_goTypes,
		DependencyIndexes: file_note_proto_depIdxs,
		EnumInfos:         file_note_proto_enumTypes,
		MessageInfos:      file_note_proto_msgTypes,
	}.Build()
	File_note_proto = out.File
	file_note_proto_rawDesc = nil
	file_note_proto_goTypes = nil
	file_note_proto_depIdxs = nil
}
