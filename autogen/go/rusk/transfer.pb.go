// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transfer.proto

package rusk

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferTransactionRequest struct {
	Value                uint64          `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Recipient            *StealthAddress `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TransferTransactionRequest) Reset()         { *m = TransferTransactionRequest{} }
func (m *TransferTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*TransferTransactionRequest) ProtoMessage()    {}
func (*TransferTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{0}
}
func (m *TransferTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferTransactionRequest.Unmarshal(m, b)
}
func (m *TransferTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferTransactionRequest.Marshal(b, m, deterministic)
}
func (m *TransferTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferTransactionRequest.Merge(m, src)
}
func (m *TransferTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_TransferTransactionRequest.Size(m)
}
func (m *TransferTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTransactionRequest proto.InternalMessageInfo

func (m *TransferTransactionRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TransferTransactionRequest) GetRecipient() *StealthAddress {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func init() {
	proto.RegisterType((*TransferTransactionRequest)(nil), "rusk.TransferTransactionRequest")
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor_96c3e6bcafb460d3) }

var fileDescriptor_96c3e6bcafb460d3 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x2a, 0x2d, 0xce,
	0x96, 0x12, 0x04, 0x8b, 0x26, 0x26, 0x97, 0x64, 0xe6, 0xe7, 0x41, 0x24, 0xa4, 0xb8, 0xb2, 0x53,
	0x2b, 0x8b, 0x21, 0x6c, 0xa5, 0x34, 0x2e, 0xa9, 0x10, 0xa8, 0xb6, 0x10, 0x84, 0xc2, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xb6, 0x20, 0x08, 0x47, 0xc8, 0x88, 0x8b, 0xb3, 0x28, 0x35, 0x39, 0xb3, 0x20,
	0x33, 0x35, 0xaf, 0x44, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x44, 0x0f, 0x64, 0x99, 0x5e,
	0x70, 0x49, 0x6a, 0x62, 0x4e, 0x49, 0x86, 0x63, 0x4a, 0x4a, 0x51, 0x6a, 0x71, 0x71, 0x10, 0x42,
	0x99, 0x51, 0x00, 0x17, 0x07, 0xcc, 0x1e, 0x21, 0x17, 0x2e, 0x6e, 0xbf, 0xd4, 0x72, 0x38, 0x57,
	0x01, 0xa2, 0x17, 0xb7, 0x33, 0xa4, 0x04, 0x91, 0x54, 0x40, 0x64, 0x94, 0x18, 0x9c, 0xb4, 0xa2,
	0x34, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x53, 0x4a, 0x8b, 0xb3,
	0x75, 0xf3, 0x52, 0x4b, 0xca, 0xf3, 0x8b, 0xb2, 0xf5, 0x41, 0xaa, 0x75, 0x8b, 0x93, 0x33, 0x52,
	0x73, 0x13, 0xad, 0x41, 0xec, 0x24, 0x36, 0xb0, 0x67, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x13, 0xf6, 0x57, 0x02, 0x23, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferClient interface {
	// Generate a new Transfer transaction.
	NewTransfer(ctx context.Context, in *TransferTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) NewTransfer(ctx context.Context, in *TransferTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/rusk.Transfer/NewTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServer is the server API for Transfer service.
type TransferServer interface {
	// Generate a new Transfer transaction.
	NewTransfer(context.Context, *TransferTransactionRequest) (*Transaction, error)
}

// UnimplementedTransferServer can be embedded to have forward compatible implementations.
type UnimplementedTransferServer struct {
}

func (*UnimplementedTransferServer) NewTransfer(ctx context.Context, req *TransferTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTransfer not implemented")
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_NewTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).NewTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Transfer/NewTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).NewTransfer(ctx, req.(*TransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTransfer",
			Handler:    _Transfer_NewTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
