// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bid.proto

package rusk

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bid representation
type Bid struct {
	EncryptedData        *PoseidonCipher   `protobuf:"bytes,1,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	HashedSecret         *BlsScalar        `protobuf:"bytes,2,opt,name=hashed_secret,json=hashedSecret,proto3" json:"hashed_secret,omitempty"`
	Nonce                *BlsScalar        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	PkR                  *StealthAddress   `protobuf:"bytes,4,opt,name=pk_r,json=pkR,proto3" json:"pk_r,omitempty"`
	Commitment           *JubJubCompressed `protobuf:"bytes,5,opt,name=commitment,proto3" json:"commitment,omitempty"`
	ElegibilityTs        *BlsScalar        `protobuf:"bytes,6,opt,name=elegibility_ts,json=elegibilityTs,proto3" json:"elegibility_ts,omitempty"`
	ExpirationTs         *BlsScalar        `protobuf:"bytes,7,opt,name=expiration_ts,json=expirationTs,proto3" json:"expiration_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b9ce1844b80bbf, []int{0}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bid.Unmarshal(m, b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return xxx_messageInfo_Bid.Size(m)
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetEncryptedData() *PoseidonCipher {
	if m != nil {
		return m.EncryptedData
	}
	return nil
}

func (m *Bid) GetHashedSecret() *BlsScalar {
	if m != nil {
		return m.HashedSecret
	}
	return nil
}

func (m *Bid) GetNonce() *BlsScalar {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Bid) GetPkR() *StealthAddress {
	if m != nil {
		return m.PkR
	}
	return nil
}

func (m *Bid) GetCommitment() *JubJubCompressed {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *Bid) GetElegibilityTs() *BlsScalar {
	if m != nil {
		return m.ElegibilityTs
	}
	return nil
}

func (m *Bid) GetExpirationTs() *BlsScalar {
	if m != nil {
		return m.ExpirationTs
	}
	return nil
}

// Used to Request the creation of a Bid
type BidTransactionRequest struct {
	K                    *BlsScalar        `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	Value                uint64            `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Secret               *JubJubCompressed `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	PkR                  *StealthAddress   `protobuf:"bytes,4,opt,name=pk_r,json=pkR,proto3" json:"pk_r,omitempty"`
	Seed                 *BlsScalar        `protobuf:"bytes,5,opt,name=seed,proto3" json:"seed,omitempty"`
	LatestConsensusRound uint64            `protobuf:"fixed64,6,opt,name=latest_consensus_round,json=latestConsensusRound,proto3" json:"latest_consensus_round,omitempty"`
	LatestConsensusStep  uint64            `protobuf:"fixed64,7,opt,name=latest_consensus_step,json=latestConsensusStep,proto3" json:"latest_consensus_step,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BidTransactionRequest) Reset()         { *m = BidTransactionRequest{} }
func (m *BidTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*BidTransactionRequest) ProtoMessage()    {}
func (*BidTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b9ce1844b80bbf, []int{1}
}
func (m *BidTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidTransactionRequest.Unmarshal(m, b)
}
func (m *BidTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidTransactionRequest.Marshal(b, m, deterministic)
}
func (m *BidTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidTransactionRequest.Merge(m, src)
}
func (m *BidTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_BidTransactionRequest.Size(m)
}
func (m *BidTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BidTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BidTransactionRequest proto.InternalMessageInfo

func (m *BidTransactionRequest) GetK() *BlsScalar {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *BidTransactionRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BidTransactionRequest) GetSecret() *JubJubCompressed {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *BidTransactionRequest) GetPkR() *StealthAddress {
	if m != nil {
		return m.PkR
	}
	return nil
}

func (m *BidTransactionRequest) GetSeed() *BlsScalar {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *BidTransactionRequest) GetLatestConsensusRound() uint64 {
	if m != nil {
		return m.LatestConsensusRound
	}
	return 0
}

func (m *BidTransactionRequest) GetLatestConsensusStep() uint64 {
	if m != nil {
		return m.LatestConsensusStep
	}
	return 0
}

type BidTransaction struct {
	BidTreeStorageIndex  uint64       `protobuf:"varint,1,opt,name=bid_tree_storage_index,json=bidTreeStorageIndex,proto3" json:"bid_tree_storage_index,omitempty"`
	Tx                   *Transaction `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BidTransaction) Reset()         { *m = BidTransaction{} }
func (m *BidTransaction) String() string { return proto.CompactTextString(m) }
func (*BidTransaction) ProtoMessage()    {}
func (*BidTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b9ce1844b80bbf, []int{2}
}
func (m *BidTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidTransaction.Unmarshal(m, b)
}
func (m *BidTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidTransaction.Marshal(b, m, deterministic)
}
func (m *BidTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidTransaction.Merge(m, src)
}
func (m *BidTransaction) XXX_Size() int {
	return xxx_messageInfo_BidTransaction.Size(m)
}
func (m *BidTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_BidTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_BidTransaction proto.InternalMessageInfo

func (m *BidTransaction) GetBidTreeStorageIndex() uint64 {
	if m != nil {
		return m.BidTreeStorageIndex
	}
	return 0
}

func (m *BidTransaction) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type FindBidRequest struct {
	Addr                 *StealthAddress `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FindBidRequest) Reset()         { *m = FindBidRequest{} }
func (m *FindBidRequest) String() string { return proto.CompactTextString(m) }
func (*FindBidRequest) ProtoMessage()    {}
func (*FindBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b9ce1844b80bbf, []int{3}
}
func (m *FindBidRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindBidRequest.Unmarshal(m, b)
}
func (m *FindBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindBidRequest.Marshal(b, m, deterministic)
}
func (m *FindBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindBidRequest.Merge(m, src)
}
func (m *FindBidRequest) XXX_Size() int {
	return xxx_messageInfo_FindBidRequest.Size(m)
}
func (m *FindBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindBidRequest proto.InternalMessageInfo

func (m *FindBidRequest) GetAddr() *StealthAddress {
	if m != nil {
		return m.Addr
	}
	return nil
}

type BidList struct {
	BidList              []*Bid       `protobuf:"bytes,1,rep,name=bid_list,json=bidList,proto3" json:"bid_list,omitempty"`
	BidHashList          []*BlsScalar `protobuf:"bytes,2,rep,name=bid_hash_list,json=bidHashList,proto3" json:"bid_hash_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BidList) Reset()         { *m = BidList{} }
func (m *BidList) String() string { return proto.CompactTextString(m) }
func (*BidList) ProtoMessage()    {}
func (*BidList) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b9ce1844b80bbf, []int{4}
}
func (m *BidList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidList.Unmarshal(m, b)
}
func (m *BidList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidList.Marshal(b, m, deterministic)
}
func (m *BidList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidList.Merge(m, src)
}
func (m *BidList) XXX_Size() int {
	return xxx_messageInfo_BidList.Size(m)
}
func (m *BidList) XXX_DiscardUnknown() {
	xxx_messageInfo_BidList.DiscardUnknown(m)
}

var xxx_messageInfo_BidList proto.InternalMessageInfo

func (m *BidList) GetBidList() []*Bid {
	if m != nil {
		return m.BidList
	}
	return nil
}

func (m *BidList) GetBidHashList() []*BlsScalar {
	if m != nil {
		return m.BidHashList
	}
	return nil
}

func init() {
	proto.RegisterType((*Bid)(nil), "rusk.Bid")
	proto.RegisterType((*BidTransactionRequest)(nil), "rusk.BidTransactionRequest")
	proto.RegisterType((*BidTransaction)(nil), "rusk.BidTransaction")
	proto.RegisterType((*FindBidRequest)(nil), "rusk.FindBidRequest")
	proto.RegisterType((*BidList)(nil), "rusk.BidList")
}

func init() { proto.RegisterFile("bid.proto", fileDescriptor_25b9ce1844b80bbf) }

var fileDescriptor_25b9ce1844b80bbf = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xd7, 0x3f, 0x6b, 0xd9, 0x19, 0x2d, 0x9a, 0xd7, 0x4d, 0x51, 0x11, 0xd2, 0x08, 0x20,
	0x2a, 0xa4, 0x75, 0xa8, 0x9b, 0x76, 0xc1, 0xc4, 0x05, 0x19, 0x42, 0x30, 0x21, 0x84, 0xd2, 0x5d,
	0x71, 0x13, 0x39, 0xf1, 0x61, 0xb1, 0x92, 0xc6, 0xc1, 0x3e, 0xd9, 0xba, 0x0b, 0xde, 0x8a, 0xe7,
	0xe2, 0x19, 0x90, 0x93, 0x6c, 0xeb, 0xd6, 0x81, 0xb8, 0x73, 0xfb, 0xfd, 0x3e, 0xfb, 0x9c, 0xcf,
	0x3e, 0x81, 0xb5, 0x50, 0x8a, 0x71, 0xae, 0x15, 0x29, 0xd6, 0xd6, 0x85, 0x49, 0x86, 0x2c, 0xe4,
	0x46, 0x46, 0xc1, 0x77, 0x89, 0xa9, 0x30, 0x95, 0x32, 0x84, 0x04, 0x2f, 0xaf, 0xd6, 0x1b, 0xa4,
	0x79, 0x66, 0x78, 0x44, 0x52, 0x65, 0xd5, 0x5f, 0xee, 0xef, 0x26, 0xb4, 0x3c, 0x29, 0xd8, 0x11,
	0xf4, 0x31, 0x8b, 0xf4, 0x65, 0x4e, 0x28, 0x02, 0xc1, 0x89, 0x3b, 0x8d, 0x9d, 0xc6, 0x68, 0x7d,
	0x32, 0x18, 0xdb, 0x9d, 0xc7, 0x5f, 0x95, 0x41, 0x29, 0x54, 0x76, 0x2c, 0xf3, 0x18, 0xb5, 0xdf,
	0xbb, 0x66, 0xdf, 0x73, 0xe2, 0xec, 0x00, 0x7a, 0x31, 0x37, 0x31, 0x8a, 0xc0, 0x60, 0xa4, 0x91,
	0x9c, 0x66, 0xe9, 0x7d, 0x54, 0x79, 0xbd, 0xd4, 0x4c, 0x23, 0x9e, 0x72, 0xed, 0x3f, 0xac, 0xa8,
	0x69, 0x09, 0xb1, 0x17, 0xb0, 0x9a, 0xa9, 0x2c, 0x42, 0xa7, 0x75, 0x3f, 0x5d, 0xa9, 0xec, 0x25,
	0xb4, 0xf3, 0x24, 0xd0, 0x4e, 0x7b, 0xb1, 0x9e, 0x29, 0x21, 0x4f, 0x29, 0x7e, 0x27, 0x84, 0x46,
	0x63, 0xfc, 0x56, 0x9e, 0xf8, 0xec, 0x10, 0x20, 0x52, 0xb3, 0x99, 0xa4, 0x19, 0x66, 0xe4, 0xac,
	0x96, 0xf8, 0x76, 0x85, 0x9f, 0x14, 0xe1, 0x49, 0x11, 0x1e, 0xab, 0x59, 0x6e, 0x71, 0x14, 0xfe,
	0x02, 0xc9, 0x0e, 0xa1, 0x8f, 0x29, 0x9e, 0xc9, 0x50, 0xa6, 0x92, 0x2e, 0x03, 0x32, 0x4e, 0xe7,
	0xfe, 0x82, 0x7a, 0x0b, 0xd8, 0xa9, 0xb1, 0x5d, 0xe3, 0x3c, 0x97, 0x9a, 0xdb, 0x38, 0xad, 0xad,
	0xfb, 0x97, 0xae, 0x6f, 0xa8, 0x53, 0xe3, 0xfe, 0x6a, 0xc2, 0x96, 0x27, 0xc5, 0xe9, 0xcd, 0x4d,
	0xf8, 0xf8, 0xa3, 0x40, 0x43, 0xec, 0x09, 0x34, 0x92, 0x3a, 0xf5, 0xa5, 0x3d, 0x1a, 0x09, 0x1b,
	0xc0, 0xea, 0x39, 0x4f, 0x0b, 0x2c, 0xc3, 0x6d, 0xfb, 0xd5, 0x0f, 0x36, 0x86, 0x4e, 0x9d, 0x79,
	0xeb, 0x9f, 0x0d, 0xd7, 0xd4, 0xff, 0xa7, 0xf9, 0x0c, 0xda, 0x06, 0x51, 0xd4, 0x39, 0x2e, 0x15,
	0x54, 0x8a, 0xec, 0x00, 0xb6, 0x53, 0x4e, 0x68, 0x28, 0x88, 0x54, 0x66, 0x30, 0x33, 0x85, 0x09,
	0xb4, 0x2a, 0x32, 0x51, 0x46, 0xd8, 0xf1, 0x07, 0x95, 0x7a, 0x7c, 0x25, 0xfa, 0x56, 0x63, 0x13,
	0xd8, 0x5a, 0x72, 0x19, 0xc2, 0xbc, 0x0c, 0xb0, 0xe3, 0x6f, 0xde, 0x31, 0x4d, 0x09, 0x73, 0x37,
	0x86, 0xfe, 0xed, 0xd4, 0xd8, 0x3e, 0x6c, 0x87, 0x52, 0x04, 0xa4, 0x11, 0x03, 0x43, 0x4a, 0xf3,
	0x33, 0x0c, 0x64, 0x26, 0x70, 0x5e, 0x66, 0xd8, 0xf6, 0x37, 0x43, 0xcb, 0x23, 0x4e, 0x2b, 0xed,
	0x93, 0x95, 0xd8, 0x53, 0x68, 0xd2, 0xbc, 0x7e, 0x9e, 0x1b, 0x55, 0x4f, 0x8b, 0x37, 0xd1, 0xa4,
	0xb9, 0xfb, 0x06, 0xfa, 0x1f, 0x64, 0x26, 0x3c, 0x29, 0xae, 0x2e, 0x66, 0x04, 0x6d, 0x2e, 0x84,
	0xbe, 0x3d, 0x11, 0x77, 0x32, 0x2b, 0x09, 0x57, 0x40, 0xd7, 0x93, 0xe2, 0xb3, 0x34, 0xc4, 0x9e,
	0xc3, 0x03, 0x5b, 0x5e, 0x2a, 0x0d, 0x39, 0x8d, 0x9d, 0xd6, 0x68, 0x7d, 0xb2, 0x56, 0x67, 0x28,
	0x85, 0xdf, 0x0d, 0x6b, 0x6a, 0x1f, 0x7a, 0x96, 0xb2, 0x73, 0x51, 0xa1, 0xcd, 0x12, 0x5d, 0x8a,
	0x7b, 0x3d, 0x94, 0xe2, 0x23, 0x37, 0xb1, 0x35, 0x4d, 0x7e, 0x02, 0x78, 0x52, 0x4c, 0x51, 0x9f,
	0xcb, 0x08, 0xd9, 0x5b, 0xe8, 0x7c, 0xc1, 0x0b, 0x3b, 0xc3, 0x8f, 0xaf, 0x0f, 0x58, 0x7e, 0x5d,
	0xc3, 0xc1, 0x7d, 0xa2, 0xbb, 0xc2, 0x5e, 0x43, 0xb7, 0x6e, 0x97, 0xd5, 0xc8, 0xed, 0xee, 0x87,
	0xbd, 0x6b, 0xa3, 0x3d, 0xdc, 0x5d, 0xf1, 0x5e, 0x7d, 0x1b, 0x9d, 0x49, 0x8a, 0x8b, 0x70, 0x1c,
	0xa9, 0xd9, 0x9e, 0x28, 0x4c, 0xb2, 0x9b, 0x21, 0x5d, 0x28, 0x9d, 0xec, 0x59, 0x72, 0xd7, 0x44,
	0x31, 0xce, 0xf8, 0x91, 0x5d, 0x87, 0x9d, 0xf2, 0x2b, 0xb3, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x12, 0x67, 0x0d, 0xab, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BidServiceClient is the client API for BidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BidServiceClient interface {
	// Generate a new Bid and a proof of it's correctness.
	NewBid(ctx context.Context, in *BidTransactionRequest, opts ...grpc.CallOption) (*BidTransaction, error)
	// Look for your owned Bids and return a list of them and it's hash repr
	FindBid(ctx context.Context, in *FindBidRequest, opts ...grpc.CallOption) (*BidList, error)
}

type bidServiceClient struct {
	cc *grpc.ClientConn
}

func NewBidServiceClient(cc *grpc.ClientConn) BidServiceClient {
	return &bidServiceClient{cc}
}

func (c *bidServiceClient) NewBid(ctx context.Context, in *BidTransactionRequest, opts ...grpc.CallOption) (*BidTransaction, error) {
	out := new(BidTransaction)
	err := c.cc.Invoke(ctx, "/rusk.BidService/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) FindBid(ctx context.Context, in *FindBidRequest, opts ...grpc.CallOption) (*BidList, error) {
	out := new(BidList)
	err := c.cc.Invoke(ctx, "/rusk.BidService/FindBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidServiceServer is the server API for BidService service.
type BidServiceServer interface {
	// Generate a new Bid and a proof of it's correctness.
	NewBid(context.Context, *BidTransactionRequest) (*BidTransaction, error)
	// Look for your owned Bids and return a list of them and it's hash repr
	FindBid(context.Context, *FindBidRequest) (*BidList, error)
}

// UnimplementedBidServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBidServiceServer struct {
}

func (*UnimplementedBidServiceServer) NewBid(ctx context.Context, req *BidTransactionRequest) (*BidTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (*UnimplementedBidServiceServer) FindBid(ctx context.Context, req *FindBidRequest) (*BidList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBid not implemented")
}

func RegisterBidServiceServer(s *grpc.Server, srv BidServiceServer) {
	s.RegisterService(&_BidService_serviceDesc, srv)
}

func _BidService_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.BidService/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).NewBid(ctx, req.(*BidTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_FindBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).FindBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.BidService/FindBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).FindBid(ctx, req.(*FindBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BidService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.BidService",
	HandlerType: (*BidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBid",
			Handler:    _BidService_NewBid_Handler,
		},
		{
			MethodName: "FindBid",
			Handler:    _BidService_FindBid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bid.proto",
}
